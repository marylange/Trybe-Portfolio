{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport filterPlanetsName from '../actions/filterPlanetsName';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const StarWarsPlanetsAPI = this.props.StarWarsPlanetsAPI; // console.log('api', StarWarsPlanetsAPI);\n\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  renderTable(data, filter) {\n    if (filter !== '') {\n      data = data.filter(planet => planet.name.toLowerCase().includes(filter.toLowerCase()));\n    }\n\n    return data.map(planet => React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, planet.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, planet.rotation_period), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, planet.diameter), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, planet.climate), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, planet.gravity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, planet.terrain), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, planet.surface_water)));\n  }\n\n  render() {\n    const _this$props = this.props,\n          data = _this$props.data,\n          fazendoRequisicao = _this$props.fazendoRequisicao,\n          dispatchSearch = _this$props.dispatchSearch,\n          filter = _this$props.filter;\n    console.log(this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Procurar: \"), React.createElement(\"input\", {\n      \"data-testid\": \"name-filter\",\n      id: \"search\",\n      onChange: event => dispatchSearch(event.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Headers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, this.renderTable(data, filter))), fazendoRequisicao && 'Loading...');\n  }\n\n}\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\n\nconst mapStateToProps = state => {\n  // console.log('state', state);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: state.planetsReducer.data,\n    filter: state.reducerFilter.filterByName.name\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n  dispatchSearch: name => dispatch(filterPlanetsName(name))\n});\n\nTable.propTypes = {\n  filter: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  dispatchSearch: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","PropTypes","fetchAPIStarWarsPlanets","filterPlanetsName","Headers","Table","Component","componentDidMount","StarWarsPlanetsAPI","props","renderTable","data","filter","planet","name","toLowerCase","includes","map","rotation_period","diameter","climate","gravity","terrain","surface_water","render","fazendoRequisicao","dispatchSearch","console","log","event","target","value","mapStateToProps","state","planetsReducer","reducerFilter","filterByName","mapDispatchToProps","dispatch","propTypes","string","isRequired","arrayOf","func","bool"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,uBAAP,MAAoC,mBAApC;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,KAAN,SAAoBN,KAAK,CAACO,SAA1B,CAAoC;AAClCC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,kBADU,GACa,KAAKC,KADlB,CACVD,kBADU,EAElB;;AACAA,IAAAA,kBAAkB;AAClB;;;;AAID;;AAEDE,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,QAAIA,MAAM,KAAK,EAAf,EAAmB;AACjBD,MAAAA,IAAI,GAAGA,IAAI,CAACC,MAAL,CAAaC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmCJ,MAAM,CAACG,WAAP,EAAnC,CAAxB,CAAP;AACD;;AAED,WAAOJ,IAAI,CAACM,GAAL,CAAUJ,MAAD,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,MAAM,CAACC,IAAZ,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,MAAM,CAACK,eAAZ,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKL,MAAM,CAACM,QAAZ,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKN,MAAM,CAACO,OAAZ,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKP,MAAM,CAACQ,OAAZ,CALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKR,MAAM,CAACS,OAAZ,CANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKT,MAAM,CAACU,aAAZ,CAPF,CADK,CAAP;AAWD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBACqD,KAAKf,KAD1D;AAAA,UACCE,IADD,eACCA,IADD;AAAA,UACOc,iBADP,eACOA,iBADP;AAAA,UAC0BC,cAD1B,eAC0BA,cAD1B;AAAA,UAC0Cd,MAD1C,eAC0CA,MAD1C;AAEPe,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAjB;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AACE,qBAAY,aADd;AAEE,MAAA,EAAE,EAAC,QAFL;AAGE,MAAA,QAAQ,EAAGoB,KAAD,IAAWH,cAAc,CAACG,KAAK,CAACC,MAAN,CAAaC,KAAd,CAHrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKrB,WAAL,CAAiBC,IAAjB,EAAuBC,MAAvB,CADH,CAFF,CAPF,EAaGa,iBAAiB,IAAI,YAbxB,CADF;AAiBD;;AAjDiC;AAoDpC;;;;;AAKA;;;;;AAKA;;AACA;;;;;;;AAKA,MAAMO,eAAe,GAAIC,KAAD,IAAW;AACjC;AACA,SAAO;AACLR,IAAAA,iBAAiB,EAAEQ,KAAK,CAACC,cAAN,CAAqBT,iBADnC;AAELd,IAAAA,IAAI,EAAEsB,KAAK,CAACC,cAAN,CAAqBvB,IAFtB;AAGLC,IAAAA,MAAM,EAAEqB,KAAK,CAACE,aAAN,CAAoBC,YAApB,CAAiCtB;AAHpC,GAAP;AAKD,CAPD;;AASA,MAAMuB,kBAAkB,GAAIC,QAAD,KAAe;AACxC9B,EAAAA,kBAAkB,EAAE,MAAM8B,QAAQ,CAACpC,uBAAuB,EAAxB,CADM;AAExCwB,EAAAA,cAAc,EAAGZ,IAAD,IAAUwB,QAAQ,CAACnC,iBAAiB,CAACW,IAAD,CAAlB;AAFM,CAAf,CAA3B;;AAKAT,KAAK,CAACkC,SAAN,GAAkB;AAChB3B,EAAAA,MAAM,EAAEX,SAAS,CAACuC,MAAV,CAAiBC,UADT;AAEhB9B,EAAAA,IAAI,EAAEV,SAAS,CAACyC,OAAV,CAAkBD,UAFR;AAGhBjC,EAAAA,kBAAkB,EAAEP,SAAS,CAAC0C,IAAV,CAAeF,UAHnB;AAIhBf,EAAAA,cAAc,EAAEzB,SAAS,CAAC0C,IAAV,CAAeF,UAJf;AAKhBhB,EAAAA,iBAAiB,EAAExB,SAAS,CAAC2C,IAAV,CAAeH;AALlB,CAAlB;AAQA,eAAezC,OAAO,CAACgC,eAAD,EAAkBK,kBAAlB,CAAP,CAA6ChC,KAA7C,CAAf;AACA","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport filterPlanetsName from '../actions/filterPlanetsName';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const { StarWarsPlanetsAPI } = this.props;\n    // console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  renderTable(data, filter) {\n    if (filter !== '') {\n      data = data.filter((planet) => planet.name.toLowerCase().includes(filter.toLowerCase()));\n    }\n\n    return data.map((planet) => (\n      <tr>\n        <td>{planet.name}</td>\n        <td>{planet.rotation_period}</td>\n        <td>{planet.diameter}</td>\n        <td>{planet.climate}</td>\n        <td>{planet.gravity}</td>\n        <td>{planet.terrain}</td>\n        <td>{planet.surface_water}</td>\n      </tr>\n    ));\n  }\n\n  render() {\n    const { data, fazendoRequisicao, dispatchSearch, filter } = this.props;\n    console.log(this.props);\n    return (\n      <div>\n        <label htmlFor=\"search\">Procurar: </label>\n        <input\n          data-testid=\"name-filter\"\n          id=\"search\"\n          onChange={(event) => dispatchSearch(event.target.value)}\n        />\n        <table>\n          <Headers />\n          <tbody>\n            {this.renderTable(data, filter)}\n          </tbody>\n        </table>\n        {fazendoRequisicao && 'Loading...'}\n      </div>\n    );\n  }\n}\n\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\nconst mapStateToProps = (state) => {\n  // console.log('state', state);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: state.planetsReducer.data,\n    filter: state.reducerFilter.filterByName.name,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n  dispatchSearch: (name) => dispatch(filterPlanetsName(name)),\n});\n\nTable.propTypes = {\n  filter: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  dispatchSearch: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}