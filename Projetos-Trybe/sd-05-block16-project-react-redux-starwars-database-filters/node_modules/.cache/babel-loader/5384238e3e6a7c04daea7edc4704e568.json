{"ast":null,"code":"import StarWarsPlanetsAPI from '../../services/StarWarsPlanetsAPI';\nexport const REQUISICAO_BEM_SUCEDIDA = 'REQUISICAO_BEM_SUCEDIDA';\nexport const FAZENDO_REQUISICAO_API = 'FAZENDO_REQUISICAO_API'; //Levar em consideraçao o action pq está vindo da API e depois o reducer(ver ser os nomes estão coincidindo)\n// Actions retornam objetos\n\nexport const fazendoRequicaoAPI = () => ({\n  /* Informa que eu estou fazendo uma Requisição na API */\n  type: FAZENDO_REQUISICAO_API,\n  fazendoRequisicao: true\n});\nexport const requicaoBemSucedida = planets => ({\n  /* Informa que a requisição foi bem sucedida */\n  type: REQUISICAO_BEM_SUCEDIDA,\n  resultPlanets: planets.results\n  /* Puxando o results da StarWarsPlanetsAPI.js */\n\n}); // Actions creator retorna uma função\n\nexport function fetchAPIStarWarsPlanets() {\n  /* essa função chama a Api que está em services/StarWarsPlanetsAPI.js */\n  return dispatch => {\n    //Ação sincrona para verificar a requisição\n    dispatch(fazendoRequicaoAPI());\n    return StarWarsPlanetsAPI() // Ação assincrona para receber informações da API\n    .then(planet => dispatch(requicaoBemSucedida(planet)));\n  };\n}\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/redux/actions/action.js"],"names":["StarWarsPlanetsAPI","REQUISICAO_BEM_SUCEDIDA","FAZENDO_REQUISICAO_API","fazendoRequicaoAPI","type","fazendoRequisicao","requicaoBemSucedida","planets","resultPlanets","results","fetchAPIStarWarsPlanets","dispatch","then","planet"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,mCAA/B;AAEA,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B,C,CACP;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAG,OAAO;AAAE;AACzCC,EAAAA,IAAI,EAAEF,sBADiC;AAEvCG,EAAAA,iBAAiB,EAAE;AAFoB,CAAP,CAA3B;AAKP,OAAO,MAAMC,mBAAmB,GAAIC,OAAD,KAAc;AAAE;AACjDH,EAAAA,IAAI,EAAEH,uBADyC;AAE/CO,EAAAA,aAAa,EAAED,OAAO,CAACE;AAAS;;AAFe,CAAd,CAA5B,C,CAKP;;AACA,OAAO,SAASC,uBAAT,GAAmC;AAAE;AAC1C,SAAQC,QAAD,IAAc;AAAE;AACrBA,IAAAA,QAAQ,CAACR,kBAAkB,EAAnB,CAAR;AACA,WAAOH,kBAAkB,GAAG;AAAH,KACtBY,IADI,CAEFC,MAAD,IAAYF,QAAQ,CAACL,mBAAmB,CAACO,MAAD,CAApB,CAFjB,CAAP;AAGD,GALD;AAMD;AAED","sourcesContent":["import StarWarsPlanetsAPI from '../../services/StarWarsPlanetsAPI';\n\nexport const REQUISICAO_BEM_SUCEDIDA = 'REQUISICAO_BEM_SUCEDIDA';\nexport const FAZENDO_REQUISICAO_API = 'FAZENDO_REQUISICAO_API';\n//Levar em consideraçao o action pq está vindo da API e depois o reducer(ver ser os nomes estão coincidindo)\n// Actions retornam objetos\nexport const fazendoRequicaoAPI = () => ({ /* Informa que eu estou fazendo uma Requisição na API */\n  type: FAZENDO_REQUISICAO_API,\n  fazendoRequisicao: true,\n});\n\nexport const requicaoBemSucedida = (planets) => ({ /* Informa que a requisição foi bem sucedida */\n  type: REQUISICAO_BEM_SUCEDIDA,\n  resultPlanets: planets.results, /* Puxando o results da StarWarsPlanetsAPI.js */\n});\n\n// Actions creator retorna uma função\nexport function fetchAPIStarWarsPlanets() { /* essa função chama a Api que está em services/StarWarsPlanetsAPI.js */\n  return (dispatch) => { //Ação sincrona para verificar a requisição\n    dispatch(fazendoRequicaoAPI());\n    return StarWarsPlanetsAPI() // Ação assincrona para receber informações da API\n      .then(\n        (planet) => dispatch(requicaoBemSucedida(planet)));\n  };\n}\n\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}