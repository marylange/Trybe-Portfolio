{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const StarWarsPlanetsAPI = this.props.StarWarsPlanetsAPI;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n      componentDidMount,quando montado, toda vez que o\n      componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  render() {\n    const _this$props = this.props,\n          resultPlanets = _this$props.resultPlanets,\n          fazendoRequisicao = _this$props.fazendoRequisicao;\n    console.log('resultPlanets', resultPlanets);\n    console.log('fazendoRequisicao', fazendoRequisicao);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(Headers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, resultPlanets.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, resultPlanets.rotation_period), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, resultPlanets.diameter), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, resultPlanets.climate), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, resultPlanets.gravity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, resultPlanets.terrain), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, resultPlanets.surface_water)))), fazendoRequisicao && 'Loading...');\n  }\n\n}\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n\n/*\n  O valor do statedoReducerVerificaActions\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\n\nconst mapStateToProps = state => {\n  console.log('state', state);\n  return {\n    fazendoRequisicao: state.fazendoRequisicao,\n    resultPlanets: state.resultPlanets\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  console.log('verificando dispatch', dispatch);\n  return {\n    StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets())\n  };\n};\n\nTable.propTypes = {\n  resultPlanets: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","PropTypes","fetchAPIStarWarsPlanets","Headers","Table","Component","componentDidMount","StarWarsPlanetsAPI","props","console","log","render","resultPlanets","fazendoRequisicao","name","rotation_period","diameter","climate","gravity","terrain","surface_water","mapStateToProps","state","mapDispatchToProps","dispatch","propTypes","arrayOf","isRequired","func","bool"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,uBAAP,MAAoC,mBAApC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,KAAN,SAAoBL,KAAK,CAACM,SAA1B,CAAoC;AAClCC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,kBADU,GACa,KAAKC,KADlB,CACVD,kBADU;AAElBE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBH,kBAAnB;AACAA,IAAAA,kBAAkB;AAClB;;;;AAID;;AAEDI,EAAAA,MAAM,GAAG;AAAA,wBACsC,KAAKH,KAD3C;AAAA,UACCI,aADD,eACCA,aADD;AAAA,UACgBC,iBADhB,eACgBA,iBADhB;AAEPJ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,aAA7B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCG,iBAAjC;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,aAAa,CAACE,IAAnB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,aAAa,CAACG,eAAnB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKH,aAAa,CAACI,QAAnB,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKJ,aAAa,CAACK,OAAnB,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKL,aAAa,CAACM,OAAnB,CALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKN,aAAa,CAACO,OAAnB,CANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKP,aAAa,CAACQ,aAAnB,CAPF,CADF,CAFF,CADF,EAeGP,iBAAiB,IAAI,YAfxB,CADF;AAmBD;;AAlCiC;AAqCpC;;;;;AAKA;;;;;AAKA;;AACA;;;;;;;AAKA,MAAMQ,eAAe,GAAIC,KAAD,IAAW;AACjCb,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBY,KAArB;AACA,SAAO;AACLT,IAAAA,iBAAiB,EAAES,KAAK,CAACT,iBADpB;AAELD,IAAAA,aAAa,EAAEU,KAAK,CAACV;AAFhB,GAAP;AAID,CAND;;AAQA,MAAMW,kBAAkB,GAAIC,QAAD,IAAc;AACvCf,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCc,QAApC;AACA,SAAO;AACLjB,IAAAA,kBAAkB,EAAE,MAAMiB,QAAQ,CAACtB,uBAAuB,EAAxB;AAD7B,GAAP;AAGD,CALD;;AAOAE,KAAK,CAACqB,SAAN,GAAkB;AAChBb,EAAAA,aAAa,EAAEX,SAAS,CAACyB,OAAV,CAAkBC,UADjB;AAEhBpB,EAAAA,kBAAkB,EAAEN,SAAS,CAAC2B,IAAV,CAAeD,UAFnB;AAGhBd,EAAAA,iBAAiB,EAAEZ,SAAS,CAAC4B,IAAV,CAAeF;AAHlB,CAAlB;AAMA,eAAe3B,OAAO,CAACqB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CnB,KAA7C,CAAf;AACA","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const { StarWarsPlanetsAPI } = this.props;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n      componentDidMount,quando montado, toda vez que o\n      componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  render() {\n    const { resultPlanets, fazendoRequisicao } = this.props;\n    console.log('resultPlanets', resultPlanets);\n    console.log('fazendoRequisicao', fazendoRequisicao);\n    return (\n      <div>\n        <table>\n          <Headers />\n          <tbody>\n            <tr>\n              <td>{resultPlanets.name}</td>\n              <td>{resultPlanets.rotation_period}</td>\n              <td>{resultPlanets.diameter}</td>\n              <td>{resultPlanets.climate}</td>\n              <td>{resultPlanets.gravity}</td>\n              <td>{resultPlanets.terrain}</td>\n              <td>{resultPlanets.surface_water}</td>\n            </tr>\n          </tbody>\n        </table>\n        {fazendoRequisicao && 'Loading...'}\n      </div>\n    );\n  }\n}\n\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n/*\n  O valor do statedoReducerVerificaActions\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\nconst mapStateToProps = (state) => {\n  console.log('state', state);\n  return {\n    fazendoRequisicao: state.fazendoRequisicao,\n    resultPlanets: state.resultPlanets,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  console.log('verificando dispatch', dispatch);\n  return {\n    StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n  };\n};\n\nTable.propTypes = {\n  resultPlanets: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}