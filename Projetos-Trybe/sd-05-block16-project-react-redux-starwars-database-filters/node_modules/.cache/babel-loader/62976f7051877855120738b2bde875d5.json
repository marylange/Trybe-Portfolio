{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchAPIStarWarsPlanets } from '../redux/actions/action';\n\nclass Table extends React.Component {\n  // componentDidMount() {\n  //   const { StarWarsPlanetsAPI } = this.props;\n  //   StarWarsPlanetsAPI();\n  //   /* \n  //   componentDidMount(quando montado), toda vez que o componente é renderizado, é feita uma chamada na API.\n  //   */\n  // }\n  render() {\n    const _this$props = this.props,\n          carregando = _this$props.carregando,\n          resultPlanets = _this$props.resultPlanets;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"renderizar isto na tela\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"rotation_period\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"orbital_period\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"diameter\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"climate\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"gravity\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"terrain\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"surface_water\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"population\"))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, resultPlanets.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, resultPlanets.rotation_period), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, resultPlanets.diameter), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, resultPlanets.climate), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, resultPlanets.gravity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, resultPlanets.terrain), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, resultPlanets), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, resultPlanets))));\n  }\n\n}\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state */\n\n/* O valor do statedoReducerVerificaActions \nvai ser três infos (o state, o reducer que contêm a action e a action que quero) */\n\n\nconst mapStateToProps = state => ({\n  resultPlanets: state.planetsReducer.resultPlanets\n});\n\nconst mapDispatchToProps = dispatch => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","fetchAPIStarWarsPlanets","Table","Component","render","props","carregando","resultPlanets","name","rotation_period","diameter","climate","gravity","terrain","mapStateToProps","state","planetsReducer","mapDispatchToProps","dispatch","StarWarsPlanetsAPI"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,uBAAT,QAAwC,yBAAxC;;AAEA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AAAA,wBAC+B,KAAKC,KADpC;AAAA,UACCC,UADD,eACCA,UADD;AAAA,UACaC,aADb,eACaA,aADb;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATF,CADF,CADF,EAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,aAAa,CAACC,IAAnB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,aAAa,CAACE,eAAnB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,aAAa,CAACG,QAAnB,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKH,aAAa,CAACI,OAAnB,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKJ,aAAa,CAACK,OAAnB,CALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKL,aAAa,CAACM,OAAnB,CANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKN,aAAL,CAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,aAAL,CARF,CAdF,CAFF,CADF;AA8BD;;AAzCiC;AA4CpC;;;;;AAKA;;AACA;;;;AAEA,MAAMO,eAAe,GAAIC,KAAD,KAAY;AAClCR,EAAAA,aAAa,EAAEQ,KAAK,CAACC,cAAN,CAAqBT;AADF,CAAZ,CAAxB;;AAIA,MAAMU,kBAAkB,GAAIC,QAAD,KAAe;AACxCC,EAAAA,kBAAkB,EAAE,MAAMD,QAAQ,CAACjB,uBAAuB,EAAxB;AADM,CAAf,CAA3B;;AAIA,eAAeD,OAAO,CAACc,eAAD,EAAkBG,kBAAlB,CAAP,CAA6Cf,KAA7C,CAAf;AACA","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchAPIStarWarsPlanets } from '../redux/actions/action';\n\nclass Table extends React.Component {\n  // componentDidMount() {\n  //   const { StarWarsPlanetsAPI } = this.props;\n  //   StarWarsPlanetsAPI();\n  //   /* \n  //   componentDidMount(quando montado), toda vez que o componente é renderizado, é feita uma chamada na API.\n  //   */\n  // }\n\n  render() {\n    const { carregando, resultPlanets } = this.props;\n    return (\n      <div>\n        <h1>renderizar isto na tela</h1>\n        <table>\n          <thead>\n            <tr>\n              <th>name</th>\n              <th>rotation_period</th>\n              <th>orbital_period</th>\n              <th>diameter</th>\n              <th>climate</th>\n              <th>gravity</th>\n              <th>terrain</th>\n              <th>surface_water</th>\n              <th>population</th>\n            </tr>\n          </thead>\n          <tr>\n            <td>{resultPlanets.name}</td>\n            <td>{resultPlanets.rotation_period}</td>\n            <td>{resultPlanets.diameter}</td>\n            <td>{resultPlanets.climate}</td>\n            <td>{resultPlanets.gravity}</td>\n            <td>{resultPlanets.terrain}</td>\n            <td>{resultPlanets}</td>\n            <td>{resultPlanets}</td>\n          </tr>\n        </table>\n      </div>\n    );\n  }\n}\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state */\n/* O valor do statedoReducerVerificaActions \nvai ser três infos (o state, o reducer que contêm a action e a action que quero) */\nconst mapStateToProps = (state) => ({\n  resultPlanets: state.planetsReducer.resultPlanets,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}