{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchAPIStarWarsPlanets } from '../redux/actions/action';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const StarWarsPlanetsAPI = this.props.StarWarsPlanetsAPI;\n    StarWarsPlanetsAPI();\n    /* \n    componentDidMount, quando montado), toda vez que o componente é renderizado, é feita uma chamada na API.\n    */\n  }\n\n  render() {\n    const resultPlanets = this.props.resultPlanets; // console.log(resultPlanets);\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"renderizar isto na tela\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"rotation_period\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"orbital_period\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"diameter\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"climate\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"gravity\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"terrain\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"surface_water\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"population\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, resultPlanets.map(planet => {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, planet.name), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, planet.rotation_period), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, planet.diameter), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, planet.climate), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, planet.gravity), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, planet.terrain), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, planet.surface_water));\n    }))));\n  }\n\n}\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state */\n\n/* O valor do statedoReducerVerificaActions \nvai ser três infos (o state, o reducer que contêm a action e a action que quero) */\n\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    fazendoRequisicao: state.fazendoRequisicao,\n    resultPlanets: state.resultPlanets\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","fetchAPIStarWarsPlanets","Table","Component","componentDidMount","StarWarsPlanetsAPI","props","render","resultPlanets","map","planet","name","rotation_period","diameter","climate","gravity","terrain","surface_water","mapStateToProps","state","console","log","fazendoRequisicao","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,uBAAT,QAAwC,yBAAxC;;AAEA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;AAClCC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,kBADU,GACa,KAAKC,KADlB,CACVD,kBADU;AAElBA,IAAAA,kBAAkB;AAClB;;;AAGD;;AAEDE,EAAAA,MAAM,GAAG;AAAA,UACCC,aADD,GACmB,KAAKF,KADxB,CACCE,aADD,EAEP;;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATF,CADF,CADF,EAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,aAAa,CAACC,GAAd,CAAmBC,MAAD,IAAY;AAC7B,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,MAAM,CAACC,IAAZ,CADQ,EAER;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,MAAM,CAACE,eAAZ,CAFQ,EAGR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,MAAM,CAACG,QAAZ,CAHQ,EAIR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKH,MAAM,CAACI,OAAZ,CAJQ,EAKR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKJ,MAAM,CAACK,OAAZ,CALQ,EAMR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKL,MAAM,CAACM,OAAZ,CANQ,EAOR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKN,MAAM,CAACO,aAAZ,CAPQ,CAAR;AASD,KAVA,CADH,CAdF,CAFF,CADF;AAiCD;;AA7CiC;AAgDpC;;;;;AAKA;;AACA;;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAO;AACLG,IAAAA,iBAAiB,EAAEH,KAAK,CAACG,iBADpB;AAELd,IAAAA,aAAa,EAAEW,KAAK,CAACX;AAFhB,GAAP;AAID,CAND;;AAQA,MAAMe,kBAAkB,GAAIC,QAAD,KAAe;AACxCnB,EAAAA,kBAAkB,EAAE,MAAMmB,QAAQ,CAACvB,uBAAuB,EAAxB;AADM,CAAf,CAA3B;;AAIA,eAAeD,OAAO,CAACkB,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CrB,KAA7C,CAAf;AACA","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchAPIStarWarsPlanets } from '../redux/actions/action';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const { StarWarsPlanetsAPI } = this.props;\n    StarWarsPlanetsAPI();\n    /* \n    componentDidMount, quando montado), toda vez que o componente é renderizado, é feita uma chamada na API.\n    */\n  }\n\n  render() {\n    const { resultPlanets } = this.props;\n    // console.log(resultPlanets);\n    return (\n      <div>\n        <h1>renderizar isto na tela</h1>\n        <table>\n          <thead>\n            <tr>\n              <th>name</th>\n              <th>rotation_period</th>\n              <th>orbital_period</th>\n              <th>diameter</th>\n              <th>climate</th>\n              <th>gravity</th>\n              <th>terrain</th>\n              <th>surface_water</th>\n              <th>population</th>\n            </tr>\n          </thead>\n          <tbody>\n            {resultPlanets.map((planet) => {\n              return (<tr>\n              <td>{planet.name}</td>\n              <td>{planet.rotation_period}</td>\n              <td>{planet.diameter}</td>\n              <td>{planet.climate}</td>\n              <td>{planet.gravity}</td>\n              <td>{planet.terrain}</td>\n              <td>{planet.surface_water}</td>\n            </tr>)\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state */\n/* O valor do statedoReducerVerificaActions \nvai ser três infos (o state, o reducer que contêm a action e a action que quero) */\nconst mapStateToProps = (state) => {\n  console.log(state);\n  return {\n    fazendoRequisicao: state.fazendoRequisicao,\n    resultPlanets: state.resultPlanets,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}