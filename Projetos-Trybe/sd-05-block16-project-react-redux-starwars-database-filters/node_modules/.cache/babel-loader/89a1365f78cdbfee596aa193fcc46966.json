{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport filterPlanetsName from '../actions/filterPlanetsName';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const StarWarsPlanetsAPI = this.props.StarWarsPlanetsAPI; // console.log('api', StarWarsPlanetsAPI);\n\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  render() {\n    const _this$props = this.props,\n          data = _this$props.data,\n          fazendoRequisicao = _this$props.fazendoRequisicao,\n          dispatchSearch = _this$props.dispatchSearch,\n          filter = _this$props.filter; // console.log(this.props);\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Procurar: \"), React.createElement(\"input\", {\n      \"data-testid\": \"name-filter\",\n      id: \"search\",\n      onChange: event => dispatchSearch(event.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Headers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, this.renderTable(data, filter))), fazendoRequisicao && 'Loading...');\n  }\n\n}\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\n\nconst mapStateToProps = state => {\n  // console.log('state', state);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: state.planetsReducer.data,\n    filter: state.reducerFilter.filterByName.name\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n  dispatchSearch: name => dispatch(filterPlanetsName(name))\n});\n\nTable.propTypes = {\n  filter: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  dispatchSearch: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","PropTypes","fetchAPIStarWarsPlanets","filterPlanetsName","Headers","Table","Component","componentDidMount","StarWarsPlanetsAPI","props","render","data","fazendoRequisicao","dispatchSearch","filter","event","target","value","renderTable","mapStateToProps","state","planetsReducer","reducerFilter","filterByName","name","mapDispatchToProps","dispatch","propTypes","string","isRequired","arrayOf","func","bool"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,uBAAP,MAAoC,mBAApC;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,KAAN,SAAoBN,KAAK,CAACO,SAA1B,CAAoC;AAClCC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,kBADU,GACa,KAAKC,KADlB,CACVD,kBADU,EAElB;;AACAA,IAAAA,kBAAkB;AAClB;;;;AAID;;AAGDE,EAAAA,MAAM,GAAG;AAAA,wBACqD,KAAKD,KAD1D;AAAA,UACCE,IADD,eACCA,IADD;AAAA,UACOC,iBADP,eACOA,iBADP;AAAA,UAC0BC,cAD1B,eAC0BA,cAD1B;AAAA,UAC0CC,MAD1C,eAC0CA,MAD1C,EAEP;;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AACE,qBAAY,aADd;AAEE,MAAA,EAAE,EAAC,QAFL;AAGE,MAAA,QAAQ,EAAGC,KAAD,IAAWF,cAAc,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAHrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKC,WAAL,CAAiBP,IAAjB,EAAuBG,MAAvB,CADH,CAFF,CAPF,EAaGF,iBAAiB,IAAI,YAbxB,CADF;AAiBD;;AAhCiC;AAmCpC;;;;;AAKA;;;;;AAKA;;AACA;;;;;;;AAKA,MAAMO,eAAe,GAAIC,KAAD,IAAW;AACjC;AACA,SAAO;AACLR,IAAAA,iBAAiB,EAAEQ,KAAK,CAACC,cAAN,CAAqBT,iBADnC;AAELD,IAAAA,IAAI,EAAES,KAAK,CAACC,cAAN,CAAqBV,IAFtB;AAGLG,IAAAA,MAAM,EAAEM,KAAK,CAACE,aAAN,CAAoBC,YAApB,CAAiCC;AAHpC,GAAP;AAKD,CAPD;;AASA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxClB,EAAAA,kBAAkB,EAAE,MAAMkB,QAAQ,CAACxB,uBAAuB,EAAxB,CADM;AAExCW,EAAAA,cAAc,EAAGW,IAAD,IAAUE,QAAQ,CAACvB,iBAAiB,CAACqB,IAAD,CAAlB;AAFM,CAAf,CAA3B;;AAKAnB,KAAK,CAACsB,SAAN,GAAkB;AAChBb,EAAAA,MAAM,EAAEb,SAAS,CAAC2B,MAAV,CAAiBC,UADT;AAEhBlB,EAAAA,IAAI,EAAEV,SAAS,CAAC6B,OAAV,CAAkBD,UAFR;AAGhBrB,EAAAA,kBAAkB,EAAEP,SAAS,CAAC8B,IAAV,CAAeF,UAHnB;AAIhBhB,EAAAA,cAAc,EAAEZ,SAAS,CAAC8B,IAAV,CAAeF,UAJf;AAKhBjB,EAAAA,iBAAiB,EAAEX,SAAS,CAAC+B,IAAV,CAAeH;AALlB,CAAlB;AAQA,eAAe7B,OAAO,CAACmB,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CpB,KAA7C,CAAf;AACA","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport filterPlanetsName from '../actions/filterPlanetsName';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const { StarWarsPlanetsAPI } = this.props;\n    // console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  \n  render() {\n    const { data, fazendoRequisicao, dispatchSearch, filter } = this.props;\n    // console.log(this.props);\n    return (\n      <div>\n        <label htmlFor=\"search\">Procurar: </label>\n        <input\n          data-testid=\"name-filter\"\n          id=\"search\"\n          onChange={(event) => dispatchSearch(event.target.value)}\n        />\n        <table>\n          <Headers />\n          <tbody>\n            {this.renderTable(data, filter)}\n          </tbody>\n        </table>\n        {fazendoRequisicao && 'Loading...'}\n      </div>\n    );\n  }\n}\n\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\nconst mapStateToProps = (state) => {\n  // console.log('state', state);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: state.planetsReducer.data,\n    filter: state.reducerFilter.filterByName.name,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n  dispatchSearch: (name) => dispatch(filterPlanetsName(name)),\n});\n\nTable.propTypes = {\n  filter: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  dispatchSearch: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}