{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport filterPlanetsName from '../actions/filterPlanetsName';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const StarWarsPlanetsAPI = this.props.StarWarsPlanetsAPI;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  render() {\n    const _this$props = this.props,\n          data = _this$props.data,\n          fazendoRequisicao = _this$props.fazendoRequisicao,\n          dispatchSearch = _this$props.dispatchSearch;\n    console.log(this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"searchForPlanet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Procurar: \"), React.createElement(\"input\", {\n      \"data-testid\": \"name-filter\",\n      id: \"searchForPlanet\",\n      onChange: event => dispatchSearch(event.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(Headers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    })), fazendoRequisicao && 'Loading...');\n  }\n\n}\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\n\nconst mapStateToProps = state => {\n  console.log('state', state);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: state.planetsReducer.data,\n    filtrando: state.reducerFilter.filterByName\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n    dispatchSearch: name => dispatch(filterPlanetsName(name))\n  };\n};\n\nTable.propTypes = {\n  resultPlanets: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","PropTypes","fetchAPIStarWarsPlanets","filterPlanetsName","Headers","Table","Component","componentDidMount","StarWarsPlanetsAPI","props","console","log","render","data","fazendoRequisicao","dispatchSearch","event","target","value","mapStateToProps","state","planetsReducer","filtrando","reducerFilter","filterByName","mapDispatchToProps","dispatch","name","propTypes","resultPlanets","arrayOf","isRequired","func","bool"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,uBAAP,MAAoC,mBAApC;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,KAAN,SAAoBN,KAAK,CAACO,SAA1B,CAAoC;AAElCC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,kBADU,GACa,KAAKC,KADlB,CACVD,kBADU;AAElBE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBH,kBAAnB;AACAA,IAAAA,kBAAkB;AAClB;;;;AAID;;AAEDI,EAAAA,MAAM,GAAG;AAAA,wBAC6C,KAAKH,KADlD;AAAA,UACCI,IADD,eACCA,IADD;AAAA,UACOC,iBADP,eACOA,iBADP;AAAA,UAC0BC,cAD1B,eAC0BA,cAD1B;AAEPL,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAjB;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAO,qBAAY,aAAnB;AAAiC,MAAA,EAAE,EAAC,iBAApC;AAAsD,MAAA,QAAQ,EAAGO,KAAD,IAAUD,cAAc,CAACC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAHF,EAUGJ,iBAAiB,IAAI,YAVxB,CADF;AAcD;;AA7BiC;AAgCpC;;;;;AAKA;;;;;AAKA;;AACA;;;;;;;AAKA,MAAMK,eAAe,GAAIC,KAAD,IAAW;AACjCV,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBS,KAArB;AACA,SAAO;AACLN,IAAAA,iBAAiB,EAAEM,KAAK,CAACC,cAAN,CAAqBP,iBADnC;AAELD,IAAAA,IAAI,EAAEO,KAAK,CAACC,cAAN,CAAqBR,IAFtB;AAGLS,IAAAA,SAAS,EAAEF,KAAK,CAACG,aAAN,CAAoBC;AAH1B,GAAP;AAKD,CAPD;;AASA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLlB,IAAAA,kBAAkB,EAAE,MAAMkB,QAAQ,CAACxB,uBAAuB,EAAxB,CAD7B;AAELa,IAAAA,cAAc,EAAGY,IAAD,IAAUD,QAAQ,CAACvB,iBAAiB,CAACwB,IAAD,CAAlB;AAF7B,GAAP;AAID,CALD;;AAOAtB,KAAK,CAACuB,SAAN,GAAkB;AAChBC,EAAAA,aAAa,EAAE5B,SAAS,CAAC6B,OAAV,CAAkBC,UADjB;AAEhBvB,EAAAA,kBAAkB,EAAEP,SAAS,CAAC+B,IAAV,CAAeD,UAFnB;AAGhBjB,EAAAA,iBAAiB,EAAEb,SAAS,CAACgC,IAAV,CAAeF;AAHlB,CAAlB;AAMA,eAAe/B,OAAO,CAACmB,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CpB,KAA7C,CAAf;AACA","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport filterPlanetsName from '../actions/filterPlanetsName';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  \n  componentDidMount() {\n    const { StarWarsPlanetsAPI } = this.props;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  render() {\n    const { data, fazendoRequisicao, dispatchSearch } = this.props;\n    console.log(this.props);\n    return (\n      <div>\n        <label htmlFor=\"searchForPlanet\">Procurar: </label>\n        <input data-testid='name-filter' id=\"searchForPlanet\" onChange={(event)=> dispatchSearch(event.target.value)} />\n        <table>\n          <Headers />\n          <tbody>\n            {\n            }\n          </tbody>\n        </table>\n        {fazendoRequisicao && 'Loading...'}\n      </div>\n    );\n  }\n}\n\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\nconst mapStateToProps = (state) => {\n  console.log('state', state);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: state.planetsReducer.data,\n    filtrando: state.reducerFilter.filterByName,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n    dispatchSearch: (name) => dispatch(filterPlanetsName(name))\n  };\n};\n\nTable.propTypes = {\n  resultPlanets: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}