{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchAPIStarWarsPlanets } from '../redux/actions/action';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const StarWarsPlanetsAPI = this.props.StarWarsPlanetsAPI;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n      componentDidMount,quando montado, toda vez que o\n      componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  render() {\n    const _this$props = this.props,\n          resultPlanets = _this$props.resultPlanets,\n          fazendoRequisicao = _this$props.fazendoRequisicao;\n    console.log('resultPlanets', thisops); // console.log('fazendoRequisicao', fazendoRequisicao);\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(Headers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    })), fazendoRequisicao && 'Loading...');\n  }\n\n}\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n\n/*\n  O valor do statedoReducerVerificaActions\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\n\nconst mapStateToProps = state => {\n  // console.log(\"coisa\", state);\n  return {\n    fazendoRequisicao: state.fazendoRequisicao,\n    resultPlanets: state.resultPlanets\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets())\n});\n\nTable.propTypes = {\n  resultPlanets: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","PropTypes","fetchAPIStarWarsPlanets","Headers","Table","Component","componentDidMount","StarWarsPlanetsAPI","props","console","log","render","resultPlanets","fazendoRequisicao","thisops","mapStateToProps","state","mapDispatchToProps","dispatch","propTypes","arrayOf","isRequired","func","bool"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,uBAAT,QAAwC,yBAAxC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,KAAN,SAAoBL,KAAK,CAACM,SAA1B,CAAoC;AAClCC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,kBADU,GACa,KAAKC,KADlB,CACVD,kBADU;AAElBE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBH,kBAAnB;AACAA,IAAAA,kBAAkB;AAClB;;;;AAID;;AAEDI,EAAAA,MAAM,GAAG;AAAA,wBACsC,KAAKH,KAD3C;AAAA,UACCI,aADD,eACCA,aADD;AAAA,UACgBC,iBADhB,eACgBA,iBADhB;AAEPJ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BI,OAA7B,EAFO,CAGP;;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EAkBGD,iBAAiB,IAAI,YAlBxB,CADF;AAsBD;;AArCiC;AAwCpC;;;;;AAKA;;;;;AAKA;;AACA;;;;;;;AAKA,MAAME,eAAe,GAAIC,KAAD,IAAW;AACjC;AACA,SAAO;AACLH,IAAAA,iBAAiB,EAAEG,KAAK,CAACH,iBADpB;AAELD,IAAAA,aAAa,EAAEI,KAAK,CAACJ;AAFhB,GAAP;AAID,CAND;;AAQA,MAAMK,kBAAkB,GAAIC,QAAD,KAAe;AACxCX,EAAAA,kBAAkB,EAAE,MAAMW,QAAQ,CAAChB,uBAAuB,EAAxB;AADM,CAAf,CAA3B;;AAIAE,KAAK,CAACe,SAAN,GAAkB;AAChBP,EAAAA,aAAa,EAAEX,SAAS,CAACmB,OAAV,CAAkBC,UADjB;AAEhBd,EAAAA,kBAAkB,EAAEN,SAAS,CAACqB,IAAV,CAAeD,UAFnB;AAGhBR,EAAAA,iBAAiB,EAAEZ,SAAS,CAACsB,IAAV,CAAeF;AAHlB,CAAlB;AAMA,eAAerB,OAAO,CAACe,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cb,KAA7C,CAAf;AACA","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchAPIStarWarsPlanets } from '../redux/actions/action';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const { StarWarsPlanetsAPI } = this.props;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n      componentDidMount,quando montado, toda vez que o\n      componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  render() {\n    const { resultPlanets, fazendoRequisicao } = this.props;\n    console.log('resultPlanets', thisops);\n    // console.log('fazendoRequisicao', fazendoRequisicao);\n    return (\n      <div>\n        <table>\n          <Headers />\n          <tbody>\n            {/* {resultPlanets.map((planet) => (\n              <tr>\n                <td>{planet.name}</td>\n                <td>{planet.rotation_period}</td>\n                <td>{planet.diameter}</td>\n                <td>{planet.climate}</td>\n                <td>{planet.gravity}</td>\n                <td>{planet.terrain}</td>\n                <td>{planet.surface_water}</td>\n              </tr>\n            ))\n            } */}\n          </tbody>\n        </table>\n        {fazendoRequisicao && 'Loading...'}\n      </div>\n    );\n  }\n}\n\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n/*\n  O valor do statedoReducerVerificaActions\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\nconst mapStateToProps = (state) => {\n  // console.log(\"coisa\", state);\n  return {\n    fazendoRequisicao: state.fazendoRequisicao,\n    resultPlanets: state.resultPlanets,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n});\n\nTable.propTypes = {\n  resultPlanets: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}