{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes, { element } from 'prop-types';\nimport { fetchAPIStarWarsPlanets } from '../actions/action';\nimport { filtrarPlanetsName } from '../actions/actionFilterPlanetsName';\nimport Headers from './Headers';\nimport FiltroNumericos from './FiltrosNumericos';\n\nconst renderTable = (data, filtroDeTexto, column, comparison, value) => {\n  console.log('hdhfhf', filtroDeTexto);\n  let planetasExibidos = data;\n\n  if (filtroDeTexto !== '') {\n    planetasExibidos = planetasExibidos.filter(planet => planet.name.toLowerCase().includes(filtroDeTexto.toLowerCase()));\n  }\n\n  return planetasExibidos.map(planet => React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, planet.name), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, planet.rotation_period), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, planet.orbital_period), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, planet.diameter), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, planet.climate), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, planet.gravity), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, planet.terrain), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, planet.surface_water), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, planet.population), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, planet.films), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, planet.created), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, planet.edited), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, planet.url)));\n};\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const StarWarsPlanetsAPI = this.props.StarWarsPlanetsAPI;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  render() {\n    const _this$props = this.props,\n          data = _this$props.data,\n          fazendoRequisicao = _this$props.fazendoRequisicao,\n          dispatchSearch = _this$props.dispatchSearch,\n          filter = _this$props.filter,\n          value = _this$props.value,\n          column = _this$props.column,\n          comparison = _this$props.comparison;\n    console.log('table', this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Procurar: \"), React.createElement(\"input\", {\n      type: \"text\",\n      \"data-testid\": \"name-filter\",\n      id: \"search\",\n      onChange: event => dispatchSearch(event.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(FiltroNumericos, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Headers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, renderTable(data, filter, column, comparison, value))), fazendoRequisicao && 'Loading...');\n  }\n\n}\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\n\nconst mapStateToProps = state => {\n  console.log('cu', state);\n  console.log('cu2', state.reducerFilter.filters.filterByName.name);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: state.planetsReducer.data,\n    filtroDeTexto: state.reducerFilter.filters.filterByName.name,\n    column: state.reducerFilter.column,\n    comparison: state.reducerFilter.comparison,\n    value: state.reducerFilter.value\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n  dispatchSearch: name => dispatch(filtrarPlanetsName(name))\n});\n\nTable.propTypes = {\n  filter: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  dispatchSearch: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","PropTypes","element","fetchAPIStarWarsPlanets","filtrarPlanetsName","Headers","FiltroNumericos","renderTable","data","filtroDeTexto","column","comparison","value","console","log","planetasExibidos","filter","planet","name","toLowerCase","includes","map","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","Table","Component","componentDidMount","StarWarsPlanetsAPI","props","render","fazendoRequisicao","dispatchSearch","event","target","mapStateToProps","state","reducerFilter","filters","filterByName","planetsReducer","mapDispatchToProps","dispatch","propTypes","string","isRequired","arrayOf","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes, { element } from 'prop-types';\nimport { fetchAPIStarWarsPlanets } from '../actions/action';\nimport { filtrarPlanetsName } from '../actions/actionFilterPlanetsName';\nimport Headers from './Headers';\nimport FiltroNumericos from './FiltrosNumericos';\n\nconst renderTable = (data, filtroDeTexto, column, comparison, value) => {\n  console.log('hdhfhf', filtroDeTexto)\n  let planetasExibidos = data;\n  if (filtroDeTexto !== '') {\n    planetasExibidos = planetasExibidos.filter((planet) => planet.name.toLowerCase().includes(filtroDeTexto.toLowerCase()));\n  }\n\n  return planetasExibidos.map((planet) => (\n    <tr>\n      <td>{planet.name}</td>\n      <td>{planet.rotation_period}</td>\n      <td>{planet.orbital_period}</td>\n      <td>{planet.diameter}</td>\n      <td>{planet.climate}</td>\n      <td>{planet.gravity}</td>\n      <td>{planet.terrain}</td>\n      <td>{planet.surface_water}</td>\n      <td>{planet.population}</td>\n      <td>{planet.films}</td>\n      <td>{planet.created}</td>\n      <td>{planet.edited}</td>\n      <td>{planet.url}</td>\n    </tr>\n  ));\n};\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const { StarWarsPlanetsAPI } = this.props;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  render() {\n    const { data, fazendoRequisicao, dispatchSearch, filter, value, column, comparison } = this.props;\n    console.log('table', this.props);\n    return (\n      <div>\n        <div>\n          <label htmlFor=\"search\">Procurar: </label>\n          <input\n            type=\"text\"\n            data-testid=\"name-filter\"\n            id=\"search\"\n            onChange={(event) => dispatchSearch(event.target.value)}\n          />\n        </div>\n        <div>\n          <FiltroNumericos />\n        </div>\n        <table>\n          <Headers />\n          <tbody>\n            {renderTable(data, filter, column, comparison, value)}\n          </tbody>\n        </table>\n        {fazendoRequisicao && 'Loading...'}\n      </div>\n    );\n  }\n}\n\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\nconst mapStateToProps = (state) => {\n  console.log('cu', state);\n  console.log('cu2', state.reducerFilter.filters.filterByName.name);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: state.planetsReducer.data,\n    filtroDeTexto: state.reducerFilter.filters.filterByName.name,\n    column: state.reducerFilter.column,\n    comparison: state.reducerFilter.comparison,\n    value: state.reducerFilter.value,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n  dispatchSearch: (name) => dispatch(filtrarPlanetsName(name)),\n});\n\nTable.propTypes = {\n  filter: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  dispatchSearch: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}