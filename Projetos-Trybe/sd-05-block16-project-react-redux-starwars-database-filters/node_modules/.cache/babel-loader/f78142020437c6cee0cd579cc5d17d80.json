{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport filterPlanetsName from '../actions/filterPlanetsName';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const StarWarsPlanetsAPI = this.props.StarWarsPlanetsAPI;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  filtro() {\n    const _this$props = this.props,\n          filtrando = _this$props.filtrando,\n          data = _this$props.data;\n    const filtro = data.indexOf(filtrando);\n    console.log('olha isso', filtro);\n\n    if (filtrando !== '') {}\n  }\n\n  change() {\n    const campo = document.getElementById('searchForPlanet');\n    console.log(campo.value.innerText);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          data = _this$props2.data,\n          fazendoRequisicao = _this$props2.fazendoRequisicao,\n          filtrando = _this$props2.filtrando,\n          filterPlanetsName = _this$props2.filterPlanetsName; // console.log('filterPlanetsName', filterPlanetsName)\n    // console.log('data', data);\n    // console.log('fazendoRequisicao', fazendoRequisicao);\n\n    console.log('filtrando', filtrando);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"searchForPlanet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Procurar: \"), React.createElement(\"input\", {\n      \"data-testid\": \"name-filter\",\n      id: \"searchForPlanet\",\n      p: this.filtro(),\n      onChange: this.change,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Headers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, data.map(planet => React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, planet.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, planet.rotation_period), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, planet.diameter), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, planet.climate), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, planet.gravity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, planet.terrain), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, planet.surface_water))))), fazendoRequisicao && 'Loading...');\n  }\n\n}\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\n\nconst mapStateToProps = state => {\n  console.log('state', state);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: state.planetsReducer.data,\n    filtrando: state.reducerFilter.filterByName\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  console.log('verificando dispatch', dispatch);\n  return {\n    StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n    filterPanetsName: event => dispatch(filterPlanetsName(event))\n  };\n};\n\nTable.propTypes = {\n  resultPlanets: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","PropTypes","fetchAPIStarWarsPlanets","filterPlanetsName","Headers","Table","Component","componentDidMount","StarWarsPlanetsAPI","props","console","log","filtro","filtrando","data","indexOf","change","campo","document","getElementById","value","innerText","render","fazendoRequisicao","map","planet","name","rotation_period","diameter","climate","gravity","terrain","surface_water","mapStateToProps","state","planetsReducer","reducerFilter","filterByName","mapDispatchToProps","dispatch","filterPanetsName","event","propTypes","resultPlanets","arrayOf","isRequired","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport filterPlanetsName from '../actions/filterPlanetsName';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const { StarWarsPlanetsAPI } = this.props;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  filtro() {\n    const { filtrando, data } = this.props;\n    const filtro = data.indexOf(filtrando);\n    console.log('olha isso',filtro)\n    if(filtrando !== '') {\n    }\n  }\n\n  change() {\n    const campo = document.getElementById('searchForPlanet');\n    console.log(campo.value.innerText);\n  }\n\n  render() {\n    const { data, fazendoRequisicao, filtrando, filterPlanetsName } = this.props;\n    // console.log('filterPlanetsName', filterPlanetsName)\n    // console.log('data', data);\n    // console.log('fazendoRequisicao', fazendoRequisicao);\n    console.log('filtrando', filtrando);\n    return (\n      <div>\n        <label htmlFor=\"searchForPlanet\">Procurar: </label>\n        <input data-testid='name-filter' id=\"searchForPlanet\" p={this.filtro()} onChange={this.change} />\n        <table>\n          <Headers />\n          <tbody>\n            {data.map((planet) => (\n              <tr>\n                <td>{planet.name}</td>\n                <td>{planet.rotation_period}</td>\n                <td>{planet.diameter}</td>\n                <td>{planet.climate}</td>\n                <td>{planet.gravity}</td>\n                <td>{planet.terrain}</td>\n                <td>{planet.surface_water}</td>\n              </tr>\n            ))\n            }\n          </tbody>\n        </table>\n        {fazendoRequisicao && 'Loading...'}\n      </div>\n    );\n  }\n}\n\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\nconst mapStateToProps = (state) => {\n  console.log('state', state);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: state.planetsReducer.data,\n    filtrando: state.reducerFilter.filterByName,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  console.log('verificando dispatch', dispatch);\n  return {\n    StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n    filterPanetsName: (event) => dispatch(filterPlanetsName(event)),\n  };\n};\n\nTable.propTypes = {\n  resultPlanets: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}