{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport filterPlanetsName from '../actions/filterPlanetsName';\nimport Headers from './Headers';\n\nconst renderTable = (data, filter) => {\n  let filteredData = data;\n\n  if (filter !== '') {\n    filteredData = filteredData.filter(planet => planet.name.toLowerCase().includes(filter.toLowerCase()));\n  }\n\n  return filteredData.map(planet => React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, planet.name), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, planet.rotation_period), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, planet.diameter), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, planet.climate), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, planet.gravity), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, planet.terrain), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, planet.surface_water)));\n};\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const StarWarsPlanetsAPI = this.props.StarWarsPlanetsAPI; // console.log('api', StarWarsPlanetsAPI);\n\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  render() {\n    const _this$props = this.props,\n          data = _this$props.data,\n          fazendoRequisicao = _this$props.fazendoRequisicao,\n          dispatchSearch = _this$props.dispatchSearch,\n          filter = _this$props.filter; // console.log(this.props);\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Procurar: \"), React.createElement(\"input\", {\n      \"data-testid\": \"name-filter\",\n      id: \"search\",\n      onChange: event => dispatchSearch(event.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Headers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, renderTable(data, filter))), fazendoRequisicao && 'Loading...');\n  }\n\n}\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\n\nconst mapStateToProps = state => {\n  // console.log('state', state);\n  return {\n    f\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n  dispatchSearch: name => dispatch(filterPlanetsName(name))\n});\n\nTable.propTypes = {\n  filter: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  dispatchSearch: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","PropTypes","fetchAPIStarWarsPlanets","filterPlanetsName","Headers","renderTable","data","filter","filteredData","planet","name","toLowerCase","includes","map","rotation_period","diameter","climate","gravity","terrain","surface_water","Table","Component","componentDidMount","StarWarsPlanetsAPI","props","render","fazendoRequisicao","dispatchSearch","event","target","value","mapStateToProps","state","f","mapDispatchToProps","dispatch","propTypes","string","isRequired","arrayOf","func","bool"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,uBAAP,MAAoC,mBAApC;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACpC,MAAIC,YAAY,GAAGF,IAAnB;;AACA,MAAIC,MAAM,KAAK,EAAf,EAAmB;AACjBC,IAAAA,YAAY,GAAGA,YAAY,CAACD,MAAb,CAAqBE,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmCL,MAAM,CAACI,WAAP,EAAnC,CAAhC,CAAf;AACD;;AAED,SAAOH,YAAY,CAACK,GAAb,CAAkBJ,MAAD,IACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,MAAM,CAACC,IAAZ,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,MAAM,CAACK,eAAZ,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,MAAM,CAACM,QAAZ,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKN,MAAM,CAACO,OAAZ,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKP,MAAM,CAACQ,OAAZ,CALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKR,MAAM,CAACS,OAAZ,CANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKT,MAAM,CAACU,aAAZ,CAPF,CADK,CAAP;AAWD,CAjBD;;AAmBA,MAAMC,KAAN,SAAoBrB,KAAK,CAACsB,SAA1B,CAAoC;AAClCC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,kBADU,GACa,KAAKC,KADlB,CACVD,kBADU,EAElB;;AACAA,IAAAA,kBAAkB;AAClB;;;;AAID;;AAEDE,EAAAA,MAAM,GAAG;AAAA,wBACqD,KAAKD,KAD1D;AAAA,UACClB,IADD,eACCA,IADD;AAAA,UACOoB,iBADP,eACOA,iBADP;AAAA,UAC0BC,cAD1B,eAC0BA,cAD1B;AAAA,UAC0CpB,MAD1C,eAC0CA,MAD1C,EAEP;;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AACE,qBAAY,aADd;AAEE,MAAA,EAAE,EAAC,QAFL;AAGE,MAAA,QAAQ,EAAGqB,KAAD,IAAWD,cAAc,CAACC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAHrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGzB,WAAW,CAACC,IAAD,EAAOC,MAAP,CADd,CAFF,CAPF,EAaGmB,iBAAiB,IAAI,YAbxB,CADF;AAiBD;;AA/BiC;AAkCpC;;;;;AAKA;;;;;AAKA;;AACA;;;;;;;AAKA,MAAMK,eAAe,GAAIC,KAAD,IAAW;AACjC;AACA,SAAO;AACLC,IAAAA;AADK,GAAP;AAGD,CALD;;AAOA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCZ,EAAAA,kBAAkB,EAAE,MAAMY,QAAQ,CAACjC,uBAAuB,EAAxB,CADM;AAExCyB,EAAAA,cAAc,EAAGjB,IAAD,IAAUyB,QAAQ,CAAChC,iBAAiB,CAACO,IAAD,CAAlB;AAFM,CAAf,CAA3B;;AAKAU,KAAK,CAACgB,SAAN,GAAkB;AAChB7B,EAAAA,MAAM,EAAEN,SAAS,CAACoC,MAAV,CAAiBC,UADT;AAEhBhC,EAAAA,IAAI,EAAEL,SAAS,CAACsC,OAAV,CAAkBD,UAFR;AAGhBf,EAAAA,kBAAkB,EAAEtB,SAAS,CAACuC,IAAV,CAAeF,UAHnB;AAIhBX,EAAAA,cAAc,EAAE1B,SAAS,CAACuC,IAAV,CAAeF,UAJf;AAKhBZ,EAAAA,iBAAiB,EAAEzB,SAAS,CAACwC,IAAV,CAAeH;AALlB,CAAlB;AAQA,eAAetC,OAAO,CAAC+B,eAAD,EAAkBG,kBAAlB,CAAP,CAA6Cd,KAA7C,CAAf;AACA","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport filterPlanetsName from '../actions/filterPlanetsName';\nimport Headers from './Headers';\n\nconst renderTable = (data, filter) => {\n  let filteredData = data;\n  if (filter !== '') {\n    filteredData = filteredData.filter((planet) => planet.name.toLowerCase().includes(filter.toLowerCase()));\n  }\n\n  return filteredData.map((planet) => (\n    <tr>\n      <td>{planet.name}</td>\n      <td>{planet.rotation_period}</td>\n      <td>{planet.diameter}</td>\n      <td>{planet.climate}</td>\n      <td>{planet.gravity}</td>\n      <td>{planet.terrain}</td>\n      <td>{planet.surface_water}</td>\n    </tr>\n  ));\n}\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const { StarWarsPlanetsAPI } = this.props;\n    // console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  render() {\n    const { data, fazendoRequisicao, dispatchSearch, filter } = this.props;\n    // console.log(this.props);\n    return (\n      <div>\n        <label htmlFor=\"search\">Procurar: </label>\n        <input\n          data-testid=\"name-filter\"\n          id=\"search\"\n          onChange={(event) => dispatchSearch(event.target.value)}\n        />\n        <table>\n          <Headers />\n          <tbody>\n            {renderTable(data, filter)}\n          </tbody>\n        </table>\n        {fazendoRequisicao && 'Loading...'}\n      </div>\n    );\n  }\n}\n\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\nconst mapStateToProps = (state) => {\n  // console.log('state', state);\n  return {\n    f\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n  dispatchSearch: (name) => dispatch(filterPlanetsName(name)),\n});\n\nTable.propTypes = {\n  filter: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  dispatchSearch: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}