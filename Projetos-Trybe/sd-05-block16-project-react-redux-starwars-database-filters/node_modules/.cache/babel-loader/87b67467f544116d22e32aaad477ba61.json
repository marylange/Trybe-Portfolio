{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const StarWarsPlanetsAPI = this.props.StarWarsPlanetsAPI;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n      componentDidMount,quando montado, toda vez que o\n      componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  filterPlanets() {\n    const filtrando = this.props.filtrando;\n    this.setState = {};\n  }\n\n  render() {\n    const _this$props = this.props,\n          resultPlanets = _this$props.resultPlanets,\n          fazendoRequisicao = _this$props.fazendoRequisicao,\n          filtrando = _this$props.filtrando;\n    console.log('resultPlanets', resultPlanets);\n    console.log('fazendoRequisicao', fazendoRequisicao);\n    console.log('filtrando', filtrando.name);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"searchForPlanet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"Procurar: \"), React.createElement(\"input\", {\n      \"data-testid\": \"name-filter\",\n      id: \"searchForPlanet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(Headers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, resultPlanets.map(planet => React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, planet.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, planet.rotation_period), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, planet.diameter), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, planet.climate), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, planet.gravity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, planet.terrain), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, planet.surface_water))))), fazendoRequisicao && 'Loading...');\n  }\n\n}\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n\n/*\n  O valor do statedoReducerVerificaActions\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\n\nconst mapStateToProps = state => {\n  console.log('state', state);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    resultPlanets: state.planetsReducer.resultPlanets,\n    filtrando: state.planetsReducer.filtrandoPlanetas\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  console.log('verificando dispatch', dispatch);\n  return {\n    StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets())\n  };\n};\n\nTable.propTypes = {\n  resultPlanets: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","PropTypes","fetchAPIStarWarsPlanets","Headers","Table","Component","componentDidMount","StarWarsPlanetsAPI","props","console","log","filterPlanets","filtrando","setState","render","resultPlanets","fazendoRequisicao","name","map","planet","rotation_period","diameter","climate","gravity","terrain","surface_water","mapStateToProps","state","planetsReducer","filtrandoPlanetas","mapDispatchToProps","dispatch","propTypes","arrayOf","isRequired","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const { StarWarsPlanetsAPI } = this.props;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n      componentDidMount,quando montado, toda vez que o\n      componente é renderizado é feita umaChamada na API.\n    */\n  }\n  filterPlanets() {\n    const { filtrando } = this.props;\n    this.setState = ({\n\n    });\n  }\n  render() {\n    const { resultPlanets, fazendoRequisicao, filtrando } = this.props;\n    console.log('resultPlanets', resultPlanets);\n    console.log('fazendoRequisicao', fazendoRequisicao);\n    console.log('filtrando', filtrando.name);\n    return (\n      <div>\n        <label htmlFor=\"searchForPlanet\">Procurar: </label>\n        <input data-testid='name-filter' id=\"searchForPlanet\">{}</input>\n        <table>\n          <Headers />\n          <tbody>\n            {resultPlanets.map((planet) => (\n              <tr>\n                <td>{planet.name}</td>\n                <td>{planet.rotation_period}</td>\n                <td>{planet.diameter}</td>\n                <td>{planet.climate}</td>\n                <td>{planet.gravity}</td>\n                <td>{planet.terrain}</td>\n                <td>{planet.surface_water}</td>\n              </tr>\n            ))\n            }\n          </tbody>\n        </table>\n        {fazendoRequisicao && 'Loading...'}\n      </div>\n    );\n  }\n}\n\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n/*\n  O valor do statedoReducerVerificaActions\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\nconst mapStateToProps = (state) => {\n  console.log('state', state);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    resultPlanets: state.planetsReducer.resultPlanets,\n    filtrando: state.planetsReducer.filtrandoPlanetas,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  console.log('verificando dispatch', dispatch);\n  return {\n    StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n  };\n};\n\nTable.propTypes = {\n  resultPlanets: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}