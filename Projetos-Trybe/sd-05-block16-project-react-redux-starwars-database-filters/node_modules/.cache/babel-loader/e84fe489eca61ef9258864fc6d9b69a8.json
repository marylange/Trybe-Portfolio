{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport Headers from './HeaderTabela';\nimport FiltroNumericos from './FiltrosNumericos';\nimport FiltrosDaPagina from './HeaderPagina';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const StarWarsPlanetsAPI = this.props.StarWarsPlanetsAPI;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  render() {\n    const _this$props = this.props,\n          data = _this$props.data,\n          fazendoRequisicao = _this$props.fazendoRequisicao;\n    console.log('table', this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    });\n  }\n\n}\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\n\nconst filtraPlanetas = (planetas, filtroDeTexto) => {\n  console.log('planetas', planetas);\n  let planetasExibidos = planetas;\n\n  if (filtroDeTexto !== '') {\n    planetasExibidos = planetasExibidos.filter(planet => planet.name.toLowerCase().includes(filtroDeTexto.toLowerCase()));\n  }\n\n  return planetasExibidos;\n};\n\nconst mapStateToProps = state => {\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: filtraPlanetas(state.planetsReducer.data, state.reducerFilter.filters.filterByName.name)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets())\n});\n\nTable.propTypes = {\n  planetasExibidos: PropTypes.object.isRequired,\n  data: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired,\n  planetas: PropTypes.arrayOf.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","PropTypes","fetchAPIStarWarsPlanets","Headers","FiltroNumericos","FiltrosDaPagina","Table","Component","componentDidMount","StarWarsPlanetsAPI","props","console","log","render","data","fazendoRequisicao","filtraPlanetas","planetas","filtroDeTexto","planetasExibidos","filter","planet","name","toLowerCase","includes","mapStateToProps","state","planetsReducer","reducerFilter","filters","filterByName","mapDispatchToProps","dispatch","propTypes","object","isRequired","arrayOf","func","bool"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,uBAAP,MAAoC,mBAApC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,eAAP,MAA4B,gBAA5B;;AAEA,MAAMC,KAAN,SAAoBP,KAAK,CAACQ,SAA1B,CAAoC;AAClCC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,kBADU,GACa,KAAKC,KADlB,CACVD,kBADU;AAElBE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBH,kBAAnB;AACAA,IAAAA,kBAAkB;AAClB;;;;AAID;;AAEDI,EAAAA,MAAM,GAAG;AAAA,wBAC6B,KAAKH,KADlC;AAAA,UACCI,IADD,eACCA,IADD;AAAA,UACOC,iBADP,eACOA,iBADP;AAEPJ,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKF,KAA1B;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAgCD;;AA9CiC;AAiDpC;;;;;AAKA;;;;;AAKA;;AACA;;;;;;;AAMA,MAAMM,cAAc,GAAG,CAACC,QAAD,EAAWC,aAAX,KAA6B;AAClDP,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBK,QAAxB;AACA,MAAIE,gBAAgB,GAAGF,QAAvB;;AACA,MAAIC,aAAa,KAAK,EAAtB,EAA0B;AACxBC,IAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CAAyBC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmCN,aAAa,CAACK,WAAd,EAAnC,CAApC,CAAnB;AACD;;AAED,SAAOJ,gBAAP;AACD,CARD;;AAUA,MAAMM,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLX,IAAAA,iBAAiB,EAAEW,KAAK,CAACC,cAAN,CAAqBZ,iBADnC;AAELD,IAAAA,IAAI,EAAEE,cAAc,CAACU,KAAK,CAACC,cAAN,CAAqBb,IAAtB,EAA4BY,KAAK,CAACE,aAAN,CAAoBC,OAApB,CAA4BC,YAA5B,CAAyCR,IAArE;AAFf,GAAP;AAID,CALD;;AAOA,MAAMS,kBAAkB,GAAIC,QAAD,KAAe;AACxCvB,EAAAA,kBAAkB,EAAE,MAAMuB,QAAQ,CAAC9B,uBAAuB,EAAxB;AADM,CAAf,CAA3B;;AAIAI,KAAK,CAAC2B,SAAN,GAAkB;AAChBd,EAAAA,gBAAgB,EAAElB,SAAS,CAACiC,MAAV,CAAiBC,UADnB;AAEhBrB,EAAAA,IAAI,EAAEb,SAAS,CAACmC,OAAV,CAAkBD,UAFR;AAGhB1B,EAAAA,kBAAkB,EAAER,SAAS,CAACoC,IAAV,CAAeF,UAHnB;AAIhBpB,EAAAA,iBAAiB,EAAEd,SAAS,CAACqC,IAAV,CAAeH,UAJlB;AAKhBlB,EAAAA,QAAQ,EAAEhB,SAAS,CAACmC,OAAV,CAAkBD;AALZ,CAAlB;AAQA,eAAenC,OAAO,CAACyB,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CzB,KAA7C,CAAf;AACA","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport Headers from './HeaderTabela';\nimport FiltroNumericos from './FiltrosNumericos';\nimport FiltrosDaPagina from './HeaderPagina';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const { StarWarsPlanetsAPI } = this.props;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  render() {\n    const { data, fazendoRequisicao } = this.props;\n    console.log('table', this.props);\n    return (\n      <div>\n        {/* <div>\n          <FiltrosDaPagina />\n          <FiltroNumericos />\n        </div>\n        <table>\n          <Headers />\n          <tbody>\n            {data.map((planet) => (\n              <tr>\n                <td>{planet.name}</td>\n                <td>{planet.rotation_period}</td>\n                <td>{planet.orbital_period}</td>\n                <td>{planet.diameter}</td>\n                <td>{planet.climate}</td>\n                <td>{planet.gravity}</td>\n                <td>{planet.terrain}</td>\n                <td>{planet.surface_water}</td>\n                <td>{planet.population}</td>\n                <td>{planet.films}</td>\n                <td>{planet.created}</td>\n                <td>{planet.edited}</td>\n                <td>{planet.url}</td>\n              </tr>\n            ))\n            }\n          </tbody>\n        </table>\n        {fazendoRequisicao && 'Loading...'} */}\n      </div>\n    );\n  }\n}\n\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\nconst filtraPlanetas = (planetas, filtroDeTexto) => {\n  console.log('planetas', planetas)\n  let planetasExibidos = planetas;\n  if (filtroDeTexto !== '') {\n    planetasExibidos = planetasExibidos.filter((planet) => planet.name.toLowerCase().includes(filtroDeTexto.toLowerCase()));\n  }\n\n  return planetasExibidos;\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: filtraPlanetas(state.planetsReducer.data, state.reducerFilter.filters.filterByName.name)\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n});\n\nTable.propTypes = {\n  planetasExibidos: PropTypes.object.isRequired,\n  data: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired,\n  planetas: PropTypes.arrayOf.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}