{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport filterPlanetsName from '../actions/filterPlanetsName';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const StarWarsPlanetsAPI = this.props.StarWarsPlanetsAPI;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  filtro() {\n    const filtrando = this.props.filtrando;\n\n    if (filtrando !== '') {\n      return;\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          data = _this$props.data,\n          fazendoRequisicao = _this$props.fazendoRequisicao,\n          filtrando = _this$props.filtrando,\n          filterPlanetsName = _this$props.filterPlanetsName; // console.log('filterPlanetsName', filterPlanetsName)\n    // console.log('data', data);\n    // console.log('fazendoRequisicao', fazendoRequisicao);\n\n    console.log('filtrando', filtrando);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"searchForPlanet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Procurar: \"), React.createElement(\"input\", {\n      \"data-testid\": \"name-filter\",\n      id: \"searchForPlanet\",\n      onChange: event => filterPlanetsName(event.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Headers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, data.map(planet => React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, planet.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, planet.rotation_period), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, planet.diameter), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, planet.climate), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, planet.gravity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, planet.terrain), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, planet.surface_water))))), fazendoRequisicao && 'Loading...');\n  }\n\n}\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\n\nconst mapStateToProps = state => {\n  console.log('state', state);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: state.planetsReducer.data,\n    filtrando: state.reducerFilter.filterByName\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  console.log('verificando dispatch', dispatch);\n  return {\n    StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n    filterPanetsName: event => dispatch(filterPlanetsName(event))\n  };\n};\n\nTable.propTypes = {\n  resultPlanets: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","PropTypes","fetchAPIStarWarsPlanets","filterPlanetsName","Headers","Table","Component","componentDidMount","StarWarsPlanetsAPI","props","console","log","filtro","filtrando","render","data","fazendoRequisicao","event","target","value","map","planet","name","rotation_period","diameter","climate","gravity","terrain","surface_water","mapStateToProps","state","planetsReducer","reducerFilter","filterByName","mapDispatchToProps","dispatch","filterPanetsName","propTypes","resultPlanets","arrayOf","isRequired","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchAPIStarWarsPlanets from '../actions/action';\nimport filterPlanetsName from '../actions/filterPlanetsName';\nimport Headers from './Headers';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const { StarWarsPlanetsAPI } = this.props;\n    console.log('api', StarWarsPlanetsAPI);\n    StarWarsPlanetsAPI();\n    /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n    */\n  }\n\n  filtro() {\n    const { filtrando } = this.props;\n    if(filtrando !== '') {\n      return \n    }\n  }\n\n  render() {\n    const { data, fazendoRequisicao, filtrando, filterPlanetsName } = this.props;\n    // console.log('filterPlanetsName', filterPlanetsName)\n    // console.log('data', data);\n    // console.log('fazendoRequisicao', fazendoRequisicao);\n    console.log('filtrando', filtrando);\n    return (\n      <div>\n        <label htmlFor=\"searchForPlanet\">Procurar: </label>\n        <input data-testid='name-filter' id=\"searchForPlanet\" onChange={(event) => filterPlanetsName(event.target.value)} />\n        <table>\n          <Headers />\n          <tbody>\n            {data.map((planet) => (\n              <tr>\n                <td>{planet.name}</td>\n                <td>{planet.rotation_period}</td>\n                <td>{planet.diameter}</td>\n                <td>{planet.climate}</td>\n                <td>{planet.gravity}</td>\n                <td>{planet.terrain}</td>\n                <td>{planet.surface_water}</td>\n              </tr>\n            ))\n            }\n          </tbody>\n        </table>\n        {fazendoRequisicao && 'Loading...'}\n      </div>\n    );\n  }\n}\n\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/* os states que vou usar mapStateToProps vem do reducer initial_state*/\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\nconst mapStateToProps = (state) => {\n  console.log('state', state);\n  return {\n    fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n    data: state.planetsReducer.data,\n    filtrando: state.reducerFilter.filterByName,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  console.log('verificando dispatch', dispatch);\n  return {\n    StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n    filterPanetsName: (event) => dispatch(filterPlanetsName(event)),\n  };\n};\n\nTable.propTypes = {\n  resultPlanets: PropTypes.arrayOf.isRequired,\n  StarWarsPlanetsAPI: PropTypes.func.isRequired,\n  fazendoRequisicao: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}