{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-project-starwars-datatable-hooks/src/components/HeaderPagina.js\";\nimport React, { useState, useContext } from 'react';\nimport SWContext from '../context/StarWarsContext'; // import PropTypes from 'prop-types';\n\n/*\ncolumns representa a lista com todas as opções possíveis de coluna\n*/\n// const columns = [\n//   'Coluna',\n//   'population',\n//   'orbital_period',\n//   'diameter',\n//   'rotation_period',\n//   'surface_water',\n// ];\n\nconst AllColumns = ['name', 'rotation_period', 'orbital_period', 'diameter', 'climate', 'gravity', 'terrain', 'surface_water', 'population', 'films', 'created', 'edited', 'url'];\nconst options = ['Comparação', 'maior que', 'menor que', 'igual a'];\n\nfunction FiltrosDaPagina() {\n  const [column, setColumn] = useState(''); // const [comparison, setComparison] = useState('');\n  // const [value, setValue] = useState('');\n\n  const {\n    filterByNumericValues,\n    setFilterByNumericValues,\n    setFilterByName\n  } = useContext(SWContext);\n\n  function handleColumnChange(event) {\n    setColumn(event.target.value);\n  }\n\n  function handleComparisonChange(event) {\n    comparison(event.target.value);\n  }\n\n  function handleValueChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  function showFilters(filters) {\n    const {\n      dispatchRemoverFiltroDaTela\n    } = this.props;\n    console.log('showFilters', filters);\n    const teste = filters.map(element => /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"filter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => dispatchRemoverFiltroDaTela(element.column),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, \"X\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, element.column, \" \", element.comparison, \" \", element.value)));\n    return teste;\n  }\n  /*\n  {columns\n    .filter((option) => !filters.map((filter) => filter.column).includes(option))\n    .map((option) => <option value={option}>{option}</option>)\n  }\n  O primeiro map da função renderColumns faz a filtragem do state de\n  filters(column: action.column, comparison: action.comparison, value: action.value),\n  retirando somente column. O segundo filter retira\n  de columns(array que foi declarado acima)a opção que incluso em currentFilterColumns e\n  o terceiro map cria options para cada coluna restante\n  */\n\n\n  function rederSelects() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"column-filter\",\n      value: column,\n      onChange: handleColumnChange(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, column.filter(option => !filterByNumericValues.map(filter => filter.column).includes(option)).map(option => /*#__PURE__*/React.createElement(\"option\", {\n      value: option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 30\n      }\n    }, option))), /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"comparison-filter\",\n      onChange: handleComparisonChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, options.filter(option => !filterByNumericValues.map(filter => filter.column).includes(option)).map(option => /*#__PURE__*/React.createElement(\"option\", {\n      value: option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 30\n      }\n    }, option))));\n  }\n\n  function handleSelectOrderColumn(event) {\n    this.setState({\n      sortColumn: event.target.value\n    }, () => {\n      console.log('state', this.state);\n    });\n  }\n\n  function handleSortChange(event) {\n    this.setState({\n      order: event.target.value\n    }, () => {\n      console.log('state', this.state);\n    });\n  }\n\n  function inputsRenderFiltersOrder() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"ASC\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      id: \"ASC\",\n      value: \"ASC\",\n      \"data-testid\": \"column-sort-input\",\n      checked: this.state.order === 'ASC',\n      onChange: handleSortChange(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }), \"ASC\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"DESC\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      id: \"DESC\",\n      value: \"DESC\",\n      \"data-testid\": \"column-sort-input\",\n      checked: this.state.order === 'DESC',\n      onChange: this.handleSortChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }), \"DESC\"));\n  }\n\n  function renderFiltrosValoresNum() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }, rederSelects(), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      \"data-testid\": \"value-filter\",\n      onChange: handleValueChange(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": \"button-filter\",\n      onClick: () => setFilterByNumericValues(this.state.column, this.state.comparison, this.state.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, \"Filtrar\"));\n  }\n\n  function renderFiltersOrder() {\n    const {\n      dispatchOrdenarColumns\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"order\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }, \"Ordem\"), /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"column-sort\",\n      onChange: handleSelectOrderColumn(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, AllColumns.map(option => /*#__PURE__*/React.createElement(\"option\", {\n      value: option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 39\n      }\n    }, option))), inputsRenderFiltersOrder(), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": \"column-sort-button\",\n      onClick: () => dispatchOrdenarColumns(this.state.sortColumn, this.state.order),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }, \"Filtrar\"));\n  }\n\n  function renderProcurar() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, \"Procurar: \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      \"data-testid\": \"name-filter\",\n      onChange: event => setFilterByName(event.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 5\n    }\n  }, renderProcurar(), renderFiltrosValoresNum(), renderFiltersOrder(), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, \"Filtros \", showFilters(filterByNumericValues))));\n} // const mapStateToProps = (state) => {\n//   console.log('filterByNumericValues', state);\n//   return {\n//     data: state.planetsReducer.data,\n//     filters: state.filters.filterByNumericValues,\n//     stateToPropsSort: state.filters.sort,\n//   };\n// };\n// const mapDispatchToProps = (dispatch) => ({\n//   dispatchSearch: (name) => dispatch(filtrarPlanetsName(name)),\n//   dispatchFilterValues: (\n//     column,\n//     comparison,\n//     value,\n//   ) => dispatch(filterValues(column, comparison, value)),\n//   dispatchRemoverFiltroDaTela: (column) => dispatch(removerFiltroDaTela(column)),\n//   dispatchOrdenarColumns: (column, sort) => dispatch(ordenarColumns(column, sort)),\n// });\n// FiltrosDaPagina.propTypes = {\n//   dispatchSearch: PropTypes.func.isRequired,\n//   dispatchFilterValues: PropTypes.func.isRequired,\n//   filters: PropTypes.func.isRequired,\n//   dispatchRemoverFiltroDaTela: PropTypes.func.isRequired,\n//   dispatchOrdenarColumns: PropTypes.func.isRequired,\n// };\n\n\nexport default FiltrosDaPagina;","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-project-starwars-datatable-hooks/src/components/HeaderPagina.js"],"names":["React","useState","useContext","SWContext","AllColumns","options","FiltrosDaPagina","column","setColumn","filterByNumericValues","setFilterByNumericValues","setFilterByName","handleColumnChange","event","target","value","handleComparisonChange","comparison","handleValueChange","setState","showFilters","filters","dispatchRemoverFiltroDaTela","props","console","log","teste","map","element","rederSelects","filter","option","includes","handleSelectOrderColumn","sortColumn","state","handleSortChange","order","inputsRenderFiltersOrder","renderFiltrosValoresNum","renderFiltersOrder","dispatchOrdenarColumns","renderProcurar"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport SWContext from '../context/StarWarsContext';\n// import PropTypes from 'prop-types';\n\n/*\ncolumns representa a lista com todas as opções possíveis de coluna\n*/\n\n// const columns = [\n//   'Coluna',\n//   'population',\n//   'orbital_period',\n//   'diameter',\n//   'rotation_period',\n//   'surface_water',\n// ];\n\nconst AllColumns = [\n  'name',\n  'rotation_period',\n  'orbital_period',\n  'diameter',\n  'climate',\n  'gravity',\n  'terrain',\n  'surface_water',\n  'population',\n  'films',\n  'created',\n  'edited',\n  'url',\n];\n\nconst options = [\n  'Comparação',\n  'maior que',\n  'menor que',\n  'igual a',\n];\n\nfunction FiltrosDaPagina() {\n  const [column, setColumn] = useState('');\n  // const [comparison, setComparison] = useState('');\n  // const [value, setValue] = useState('');\n  const { filterByNumericValues, setFilterByNumericValues, setFilterByName } = useContext(SWContext);\n\n  function handleColumnChange(event) {\n    setColumn(event.target.value);\n  }\n\n  function handleComparisonChange(event) {\n    comparison(event.target.value);\n  }\n\n  function handleValueChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  function showFilters(filters) {\n    const { dispatchRemoverFiltroDaTela } = this.props;\n    console.log('showFilters', filters);\n    const teste = filters.map((element) =>\n      <div data-testid=\"filter\">\n        <button onClick={() => dispatchRemoverFiltroDaTela(element.column)}>X</button>\n        <p>{element.column} {element.comparison} {element.value}</p>\n      </div>,\n    );\n    return teste;\n  }\n\n  /*\n  {columns\n    .filter((option) => !filters.map((filter) => filter.column).includes(option))\n    .map((option) => <option value={option}>{option}</option>)\n  }\n  O primeiro map da função renderColumns faz a filtragem do state de\n  filters(column: action.column, comparison: action.comparison, value: action.value),\n  retirando somente column. O segundo filter retira\n  de columns(array que foi declarado acima)a opção que incluso em currentFilterColumns e\n  o terceiro map cria options para cada coluna restante\n  */\n\n  function rederSelects() {\n    return (\n      <div>\n        <select\n          data-testid=\"column-filter\"\n          value={column}\n          onChange={handleColumnChange()}\n        >\n          {column\n            .filter((option) => !filterByNumericValues.map((filter) => filter.column).includes(option))\n            .map((option) => <option value={option}>{option}</option>)}\n        </select>\n        <select\n          data-testid=\"comparison-filter\"\n          onChange={handleComparisonChange}\n        >\n          {options\n            .filter((option) => !filterByNumericValues.map((filter) => filter.column).includes(option))\n            .map((option) => <option value={option}>{option}</option>)}\n        </select>\n      </div>\n    );\n  }\n\n  function handleSelectOrderColumn(event) {\n    this.setState({ sortColumn: event.target.value }, () => { console.log('state', this.state); });\n  }\n\n  function handleSortChange(event) {\n    this.setState({ order: event.target.value }, () => { console.log('state', this.state); });\n  }\n\n  function inputsRenderFiltersOrder() {\n    return (\n      <div>\n        <label htmlFor=\"ASC\">\n          <input\n            type=\"radio\"\n            id=\"ASC\"\n            value=\"ASC\"\n            data-testid=\"column-sort-input\"\n            checked={this.state.order === 'ASC'}\n            onChange={handleSortChange()}\n          />ASC\n        </label>\n        <label htmlFor=\"DESC\">\n          <input\n            type=\"radio\"\n            id=\"DESC\"\n            value=\"DESC\"\n            data-testid=\"column-sort-input\"\n            checked={this.state.order === 'DESC'}\n            onChange={this.handleSortChange}\n          />DESC\n        </label>\n      </div>\n    );\n  }\n\n  function renderFiltrosValoresNum() {\n    return (\n      <div>\n        {rederSelects()}\n        <input type=\"number\" data-testid=\"value-filter\" onChange={handleValueChange()} />\n        <button\n          data-testid=\"button-filter\"\n          onClick={\n            () => setFilterByNumericValues(\n              this.state.column,\n              this.state.comparison,\n              this.state.value,\n            )}\n        >Filtrar</button>\n      </div>\n    );\n  }\n\n  function renderFiltersOrder() {\n    const { dispatchOrdenarColumns } = this.props;\n    return (\n      <div className=\"order\">\n        <p>Ordem</p>\n        <select data-testid=\"column-sort\" onChange={handleSelectOrderColumn()}>\n          {AllColumns.map((option) => <option value={option}>{option}</option>)}\n        </select>\n        {inputsRenderFiltersOrder()}\n        <button\n          data-testid=\"column-sort-button\"\n          onClick={() => dispatchOrdenarColumns(\n            this.state.sortColumn,\n            this.state.order,\n          )}\n        >Filtrar</button>\n      </div>\n    );\n  }\n\n  function renderProcurar() {\n    return (\n      <div>\n        <label htmlFor=\"search\">Procurar: </label>\n        <input\n          type=\"text\"\n          data-testid=\"name-filter\"\n          onChange={(event) => setFilterByName(event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {renderProcurar()}\n      {renderFiltrosValoresNum()}\n      {renderFiltersOrder()}\n      <div>\n        <p>Filtros {showFilters(filterByNumericValues)}</p>\n      </div>\n    </div>\n  );\n}\n\n// const mapStateToProps = (state) => {\n//   console.log('filterByNumericValues', state);\n//   return {\n//     data: state.planetsReducer.data,\n//     filters: state.filters.filterByNumericValues,\n//     stateToPropsSort: state.filters.sort,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => ({\n//   dispatchSearch: (name) => dispatch(filtrarPlanetsName(name)),\n//   dispatchFilterValues: (\n//     column,\n//     comparison,\n//     value,\n//   ) => dispatch(filterValues(column, comparison, value)),\n//   dispatchRemoverFiltroDaTela: (column) => dispatch(removerFiltroDaTela(column)),\n//   dispatchOrdenarColumns: (column, sort) => dispatch(ordenarColumns(column, sort)),\n// });\n\n// FiltrosDaPagina.propTypes = {\n//   dispatchSearch: PropTypes.func.isRequired,\n//   dispatchFilterValues: PropTypes.func.isRequired,\n//   filters: PropTypes.func.isRequired,\n//   dispatchRemoverFiltroDaTela: PropTypes.func.isRequired,\n//   dispatchOrdenarColumns: PropTypes.func.isRequired,\n// };\n\nexport default FiltrosDaPagina;\n"]},"metadata":{},"sourceType":"module"}