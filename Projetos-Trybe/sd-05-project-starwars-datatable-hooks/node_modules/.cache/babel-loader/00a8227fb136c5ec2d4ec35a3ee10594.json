{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-project-starwars-datatable-hooks/src/components/Table.js\";\nimport React, { useEffect, useContext } from 'react';\nimport Headers from './HeaderTabela';\nimport FiltrosDaPagina from './HeaderPagina';\nimport SWContext from '../context/StarWarsContext';\nimport StarWarsPlanetsAPI from '../services/StarWarsPlanetsAPI';\n\nfunction Table() {\n  /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n  */\n  const {\n    isFetching,\n    setIsFetching,\n    setData,\n    data\n  } = useContext(SWContext);\n  useEffect(() => {\n    setIsFetching(true);\n    StarWarsPlanetsAPI().then(resp => setData(resp.results));\n    setIsFetching(false);\n  }, [setIsFetching, setData]);\n\n  function renderTable() {\n    return filtraPlanetas(data, fil).map(planet => /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, planet.name), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, planet.rotation_period), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    }, planet.orbital_period), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, planet.diameter), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }, planet.climate), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, planet.gravity), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, planet.terrain), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, planet.surface_water), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, planet.population), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, planet.films), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, planet.created), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, planet.edited), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, planet.url)));\n  } // console.log('table', this.props);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FiltrosDaPagina, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Headers, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, renderTable())), isFetching && 'Loading...');\n}\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\n\nfunction filterByNumber(arrayPlanets, filterByNumericValues) {\n  if (filterByNumericValues.comparison === 'maior que') {\n    return arrayPlanets.filter(planet => Number(planet[filterByNumericValues.column]) > Number(filterByNumericValues.value));\n  }\n\n  if (filterByNumericValues.comparison === 'menor que') {\n    return arrayPlanets.filter(planet => Number(planet[filterByNumericValues.column]) < Number(filterByNumericValues.value));\n  }\n\n  if (filterByNumericValues.comparison === 'igual a') {\n    return arrayPlanets.filter(planet => Number(planet[filterByNumericValues.column]) === Number(filterByNumericValues.value));\n  }\n\n  return arrayPlanets;\n}\n/* A function filterByNumber foi retirado do código\nda minha colega de turma Nat Macedo e adpatado para o meu código*/\n\n\nconst filtraPlanetas = (planetas, filtroDeTexto, filterByNumericValues, order) => {\n  let planetasExibidos = planetas;\n  filterByNumericValues.forEach(filter => {\n    planetasExibidos = filterByNumber(planetasExibidos, filter);\n  });\n\n  if (filtroDeTexto !== '') {\n    planetasExibidos = planetasExibidos.filter(planet => planet.name.toLowerCase().includes(filtroDeTexto.toLowerCase()));\n  }\n\n  planetasExibidos = planetasExibidos.sort((a, b) => {\n    if (isNaN(a[order.column])) {\n      if (order.sort === 'ASC') {\n        return a[order.column.toLowerCase()] < b[order.column.toLowerCase()] ? -1 : 1;\n      }\n\n      return a[order.column.toLowerCase()] > b[order.column.toLowerCase()] ? -1 : 1;\n    }\n\n    if (order.sort === 'ASC') {\n      return parseInt(a[order.column], 10) - parseInt(b[order.column], 10);\n    }\n\n    return parseInt(b[order.column], 10) - parseInt(a[order.column], 10);\n  });\n  return [...planetasExibidos];\n};\n/* os states que vou usar mapStateToProps vem do initial_state do reducer*/\n// const mapStateToProps = (state) => ({\n//   fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n//   data: filtraPlanetas(\n//     state.planetsReducer.data,\n//     state.filters.filterByName.name,\n//     state.filters.filterByNumericValues,\n//     state.filters.order),\n//   filterByNumericValues: state.filters.filterByNumericValues,\n// });\n// const mapDispatchToProps = (dispatch) => ({\n//   StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n// });\n\n\nexport default Table;\n/* Estrutura retirada dos exercícios do bloco 16 */","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-project-starwars-datatable-hooks/src/components/Table.js"],"names":["React","useEffect","useContext","Headers","FiltrosDaPagina","SWContext","StarWarsPlanetsAPI","Table","isFetching","setIsFetching","setData","data","then","resp","results","renderTable","filtraPlanetas","fil","map","planet","name","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","filterByNumber","arrayPlanets","filterByNumericValues","comparison","filter","Number","column","value","planetas","filtroDeTexto","order","planetasExibidos","forEach","toLowerCase","includes","sort","a","b","isNaN","parseInt"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from 'react';\nimport Headers from './HeaderTabela';\nimport FiltrosDaPagina from './HeaderPagina';\nimport SWContext from '../context/StarWarsContext';\nimport StarWarsPlanetsAPI from '../services/StarWarsPlanetsAPI';\n\nfunction Table() {\n  /*\n    componentDidMount,quando montado, toda vez que o\n    componente é renderizado é feita umaChamada na API.\n  */\n  const { isFetching, setIsFetching, setData, data } = useContext(SWContext);\n\n  useEffect(() => {\n    setIsFetching(true);\n    StarWarsPlanetsAPI().then((resp) => setData(resp.results));\n    setIsFetching(false);\n  }, [setIsFetching, setData]);\n\n  function renderTable() {\n    return filtraPlanetas(data, fil).map((planet) => (\n      <tr>\n        <td>{planet.name}</td>\n        <td>{planet.rotation_period}</td>\n        <td>{planet.orbital_period}</td>\n        <td>{planet.diameter}</td>\n        <td>{planet.climate}</td>\n        <td>{planet.gravity}</td>\n        <td>{planet.terrain}</td>\n        <td>{planet.surface_water}</td>\n        <td>{planet.population}</td>\n        <td>{planet.films}</td>\n        <td>{planet.created}</td>\n        <td>{planet.edited}</td>\n        <td>{planet.url}</td>\n      </tr>\n    ));\n  }\n\n  // console.log('table', this.props);\n  return (\n    <div>\n      <div>\n        <FiltrosDaPagina />\n      </div>\n      <table>\n        <Headers />\n        <tbody>\n          {renderTable()}\n        </tbody>\n      </table>\n      {isFetching && 'Loading...'}\n    </div>\n  );\n}\n\n/*\n  {fazendoRequisicao && 'Loading...'} enquanto fazendoRequisicao\n  for true, o texto loading vai aparecer na tela.\n*/\n\n/*\n  mapStateToProps faz o papel do subscribe no redux\n  e no react faz papel no render\n*/\n\n/*\n  O valor do state do verificandoRequisicaoAPI\n  vai ser três infos(o state, o reducer que\n  contêm a action e a action que quero)\n*/\n\nfunction filterByNumber(arrayPlanets, filterByNumericValues) {\n  if (filterByNumericValues.comparison === 'maior que') {\n    return arrayPlanets\n      .filter((planet) =>\n        Number(planet[filterByNumericValues.column]) > Number(filterByNumericValues.value));\n  }\n  if (filterByNumericValues.comparison === 'menor que') {\n    return arrayPlanets\n      .filter((planet) =>\n        Number(planet[filterByNumericValues.column]) < Number(filterByNumericValues.value));\n  }\n  if (filterByNumericValues.comparison === 'igual a') {\n    return arrayPlanets\n      .filter((planet) =>\n        Number(planet[filterByNumericValues.column]) === Number(filterByNumericValues.value));\n  }\n  return arrayPlanets;\n}\n\n/* A function filterByNumber foi retirado do código\nda minha colega de turma Nat Macedo e adpatado para o meu código*/\n\nconst filtraPlanetas = (planetas, filtroDeTexto, filterByNumericValues, order) => {\n  let planetasExibidos = planetas;\n  filterByNumericValues.forEach((filter) => {\n    planetasExibidos = filterByNumber(planetasExibidos, filter);\n  });\n\n  if (filtroDeTexto !== '') {\n    planetasExibidos = planetasExibidos.filter((planet) => planet.name\n      .toLowerCase().includes(filtroDeTexto.toLowerCase()));\n  }\n\n  planetasExibidos = planetasExibidos.sort((a, b) => {\n    if (isNaN(a[order.column])) {\n      if (order.sort === 'ASC') {\n        return a[order.column.toLowerCase()] < b[order.column.toLowerCase()] ? -1 : 1;\n      }\n      return a[order.column.toLowerCase()] > b[order.column.toLowerCase()] ? -1 : 1;\n    }\n    if (order.sort === 'ASC') {\n      return parseInt(a[order.column], 10) - parseInt(b[order.column], 10);\n    }\n    return parseInt(b[order.column], 10) - parseInt(a[order.column], 10);\n  });\n  return [...planetasExibidos];\n};\n\n/* os states que vou usar mapStateToProps vem do initial_state do reducer*/\n// const mapStateToProps = (state) => ({\n//   fazendoRequisicao: state.planetsReducer.fazendoRequisicao,\n//   data: filtraPlanetas(\n//     state.planetsReducer.data,\n//     state.filters.filterByName.name,\n//     state.filters.filterByNumericValues,\n//     state.filters.order),\n//   filterByNumericValues: state.filters.filterByNumericValues,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   StarWarsPlanetsAPI: () => dispatch(fetchAPIStarWarsPlanets()),\n// });\n\nexport default Table;\n/* Estrutura retirada dos exercícios do bloco 16 */\n"]},"metadata":{},"sourceType":"module"}