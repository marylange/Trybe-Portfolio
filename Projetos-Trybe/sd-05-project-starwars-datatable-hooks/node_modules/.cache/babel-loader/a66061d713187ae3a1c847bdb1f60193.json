{"ast":null,"code":"var _jsxFileName = \"/Users/marylangeleal/Trybe-portfolio/sd-05-project-starwars-datatable-hooks/src/components/HeaderPagina.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n/*\ncolumns representa a lista com todas as opções possíveis de coluna\n*/\n\nconst columns = ['Coluna', 'population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\nconst AllColumns = ['name', 'rotation_period', 'orbital_period', 'diameter', 'climate', 'gravity', 'terrain', 'surface_water', 'population', 'films', 'created', 'edited', 'url'];\nconst options = ['Comparação', 'maior que', 'menor que', 'igual a'];\n\nfunction FiltrosDaPagina() {\n  const [columns, setColumns] = useState('');\n  const [comparison, setComparison] = useState('');\n  const [value, setValue] = useState('');\n\n  function handleColumnChange(event) {\n    this.setState({\n      column: event.target.value\n    });\n  }\n\n  function handleComparisonChange(event) {\n    this.setState({\n      comparison: event.target.value\n    });\n  }\n\n  function handleValueChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  function showFilters(filters) {\n    const {\n      dispatchRemoverFiltroDaTela\n    } = this.props;\n    console.log('showFilters', filters);\n    const teste = filters.map(element => /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"filter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => dispatchRemoverFiltroDaTela(element.column),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, \"X\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, element.column, \" \", element.comparison, \" \", element.value)));\n    return teste;\n  }\n  /*\n  {columns\n    .filter((option) => !filters.map((filter) => filter.column).includes(option))\n    .map((option) => <option value={option}>{option}</option>)\n  }\n  O primeiro map da função renderColumns faz a filtragem do state de\n  filters(column: action.column, comparison: action.comparison, value: action.value),\n  retirando somente column. O segundo filter retira\n  de columns(array que foi declarado acima)a opção que incluso em currentFilterColumns e\n  o terceiro map cria options para cada coluna restante\n  */\n\n\n  function rederSelects() {\n    const {\n      filters\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"column-filter\",\n      value: this.state.column,\n      onChange: this.handleColumnChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, columns.filter(option => !filters.map(filter => filter.column).includes(option)).map(option => /*#__PURE__*/React.createElement(\"option\", {\n      value: option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 28\n      }\n    }, option))), /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"comparison-filter\",\n      onChange: this.handleComparisonChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, options.filter(option => !filters.map(filter => filter.column).includes(option)).map(option => /*#__PURE__*/React.createElement(\"option\", {\n      value: option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 28\n      }\n    }, option))));\n  }\n\n  function handleSelectOrderColumn(event) {\n    this.setState({\n      sortColumn: event.target.value\n    }, () => {\n      console.log('state', this.state);\n    });\n  }\n\n  function handleSortChange(event) {\n    this.setState({\n      order: event.target.value\n    }, () => {\n      console.log('state', this.state);\n    });\n  }\n\n  function inputsRenderFiltersOrder() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"ASC\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      id: \"ASC\",\n      value: \"ASC\",\n      \"data-testid\": \"column-sort-input\",\n      checked: this.state.order === 'ASC',\n      onChange: this.handleSortChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }), \"ASC\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"DESC\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      id: \"DESC\",\n      value: \"DESC\",\n      \"data-testid\": \"column-sort-input\",\n      checked: this.state.order === 'DESC',\n      onChange: this.handleSortChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }), \"DESC\"));\n  }\n\n  function renderFiltrosValoresNum() {\n    const {\n      dispatchFilterValues\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 5\n      }\n    }, this.rederSelects(), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      \"data-testid\": \"value-filter\",\n      onChange: this.handleValueChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": \"button-filter\",\n      onClick: () => dispatchFilterValues(this.state.column, this.state.comparison, this.state.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }\n    }, \"Filtrar\"));\n  }\n\n  function renderFiltersOrder() {\n    const {\n      dispatchOrdenarColumns\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"order\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    }, \"Ordem\"), /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"column-sort\",\n      onChange: this.handleSelectOrderColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 7\n      }\n    }, AllColumns.map(option => /*#__PURE__*/React.createElement(\"option\", {\n      value: option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 37\n      }\n    }, option))), this.inputsRenderFiltersOrder(), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": \"column-sort-button\",\n      onClick: () => dispatchOrdenarColumns(this.state.sortColumn, this.state.order),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }, \"Filtrar\"));\n  }\n\n  function renderProcurar() {\n    const {\n      dispatchSearch\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }\n    }, \"Procurar: \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      \"data-testid\": \"name-filter\",\n      onChange: event => dispatchSearch(event.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  const {\n    filters\n  } = this.props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }\n  }, this.renderProcurar(), this.renderFiltrosValoresNum(), this.renderFiltersOrder(), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, \"Filtros \", this.showFilters(filters))));\n}\n\nconst mapStateToProps = state => {\n  console.log('filterByNumericValues', state);\n  return {\n    data: state.planetsReducer.data,\n    filters: state.filters.filterByNumericValues,\n    stateToPropsSort: state.filters.sort\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchSearch: name => dispatch(filtrarPlanetsName(name)),\n  dispatchFilterValues: (column, comparison, value) => dispatch(filterValues(column, comparison, value)),\n  dispatchRemoverFiltroDaTela: column => dispatch(removerFiltroDaTela(column)),\n  dispatchOrdenarColumns: (column, sort) => dispatch(ordenarColumns(column, sort))\n});\n\nFiltrosDaPagina.propTypes = {\n  dispatchSearch: PropTypes.func.isRequired,\n  dispatchFilterValues: PropTypes.func.isRequired,\n  filters: PropTypes.func.isRequired,\n  dispatchRemoverFiltroDaTela: PropTypes.func.isRequired,\n  dispatchOrdenarColumns: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(FiltrosDaPagina);","map":{"version":3,"sources":["/Users/marylangeleal/Trybe-portfolio/sd-05-project-starwars-datatable-hooks/src/components/HeaderPagina.js"],"names":["React","useState","PropTypes","columns","AllColumns","options","FiltrosDaPagina","setColumns","comparison","setComparison","value","setValue","handleColumnChange","event","setState","column","target","handleComparisonChange","handleValueChange","showFilters","filters","dispatchRemoverFiltroDaTela","props","console","log","teste","map","element","rederSelects","state","filter","option","includes","handleSelectOrderColumn","sortColumn","handleSortChange","order","inputsRenderFiltersOrder","renderFiltrosValoresNum","dispatchFilterValues","renderFiltersOrder","dispatchOrdenarColumns","renderProcurar","dispatchSearch","mapStateToProps","data","planetsReducer","filterByNumericValues","stateToPropsSort","sort","mapDispatchToProps","dispatch","name","filtrarPlanetsName","filterValues","removerFiltroDaTela","ordenarColumns","propTypes","func","isRequired","connect"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n/*\ncolumns representa a lista com todas as opções possíveis de coluna\n*/\n\nconst columns = [\n  'Coluna',\n  'population',\n  'orbital_period',\n  'diameter',\n  'rotation_period',\n  'surface_water',\n];\n\nconst AllColumns = [\n  'name',\n  'rotation_period',\n  'orbital_period',\n  'diameter',\n  'climate',\n  'gravity',\n  'terrain',\n  'surface_water',\n  'population',\n  'films',\n  'created',\n  'edited',\n  'url',\n];\n\nconst options = [\n  'Comparação',\n  'maior que',\n  'menor que',\n  'igual a',\n];\n\nfunction FiltrosDaPagina() {\n  const [columns, setColumns] = useState('');\n  const [comparison, setComparison] = useState('');\n  const [value, setValue] = useState('');\n\nfunction handleColumnChange(event) {\n  this.setState({ column: event.target.value });\n}\n\nfunction handleComparisonChange(event) {\n  this.setState({ comparison: event.target.value });\n}\n\nfunction handleValueChange(event) {\n  this.setState({ value: event.target.value });\n}\n\nfunction showFilters(filters) {\n  const { dispatchRemoverFiltroDaTela } = this.props;\n  console.log('showFilters', filters);\n  const teste = filters.map((element) =>\n    <div data-testid=\"filter\">\n      <button onClick={() => dispatchRemoverFiltroDaTela(element.column)}>X</button>\n      <p>{element.column} {element.comparison} {element.value}</p>\n    </div>,\n  );\n  return teste;\n}\n\n/*\n{columns\n  .filter((option) => !filters.map((filter) => filter.column).includes(option))\n  .map((option) => <option value={option}>{option}</option>)\n}\nO primeiro map da função renderColumns faz a filtragem do state de\nfilters(column: action.column, comparison: action.comparison, value: action.value),\nretirando somente column. O segundo filter retira\nde columns(array que foi declarado acima)a opção que incluso em currentFilterColumns e\no terceiro map cria options para cada coluna restante\n*/\n\nfunction rederSelects() {\n  const { filters } = this.props;\n  return (\n    <div>\n      <select\n        data-testid=\"column-filter\"\n        value={this.state.column}\n        onChange={this.handleColumnChange}\n      >\n        {columns\n          .filter((option) => !filters.map((filter) => filter.column).includes(option))\n          .map((option) => <option value={option}>{option}</option>)}\n      </select>\n      <select\n        data-testid=\"comparison-filter\"\n        onChange={this.handleComparisonChange}\n      >\n        {options\n          .filter((option) => !filters.map((filter) => filter.column).includes(option))\n          .map((option) => <option value={option}>{option}</option>)}\n      </select>\n    </div>\n  );\n}\n\nfunction handleSelectOrderColumn(event) {\n  this.setState({ sortColumn: event.target.value }, () => { console.log('state', this.state); });\n}\n\nfunction handleSortChange(event) {\n  this.setState({ order: event.target.value }, () => { console.log('state', this.state); });\n}\n\nfunction inputsRenderFiltersOrder() {\n  return (\n    <div>\n      <label htmlFor=\"ASC\">\n        <input\n          type=\"radio\"\n          id=\"ASC\"\n          value=\"ASC\"\n          data-testid=\"column-sort-input\"\n          checked={this.state.order === 'ASC'}\n          onChange={this.handleSortChange}\n        />ASC\n        </label>\n      <label htmlFor=\"DESC\">\n        <input\n          type=\"radio\"\n          id=\"DESC\"\n          value=\"DESC\"\n          data-testid=\"column-sort-input\"\n          checked={this.state.order === 'DESC'}\n          onChange={this.handleSortChange}\n        />DESC\n        </label>\n    </div>\n  );\n}\n\nfunction renderFiltrosValoresNum() {\n  const { dispatchFilterValues } = this.props;\n  return (\n    <div>\n      {this.rederSelects()}\n      <input type=\"number\" data-testid=\"value-filter\" onChange={this.handleValueChange} />\n      <button\n        data-testid=\"button-filter\"\n        onClick={\n          () => dispatchFilterValues(\n            this.state.column,\n            this.state.comparison,\n            this.state.value,\n          )}\n      >Filtrar</button>\n    </div>\n  );\n}\n\nfunction renderFiltersOrder() {\n  const { dispatchOrdenarColumns } = this.props;\n  return (\n    <div className=\"order\">\n      <p>Ordem</p>\n      <select data-testid=\"column-sort\" onChange={this.handleSelectOrderColumn}>\n        {AllColumns.map((option) => <option value={option}>{option}</option>)}\n      </select>\n      {this.inputsRenderFiltersOrder()}\n      <button\n        data-testid=\"column-sort-button\"\n        onClick={() => dispatchOrdenarColumns(\n          this.state.sortColumn,\n          this.state.order,\n        )}\n      >Filtrar</button>\n    </div>\n  );\n}\n\nfunction renderProcurar() {\n  const { dispatchSearch } = this.props;\n  return (\n    <div>\n      <label htmlFor=\"search\">Procurar: </label>\n      <input\n        type=\"text\"\n        data-testid=\"name-filter\"\n        onChange={(event) => dispatchSearch(event.target.value)}\n      />\n    </div>\n  );\n}\n\n\n  const { filters } = this.props;\n  return (\n    <div>\n      {this.renderProcurar()}\n      {this.renderFiltrosValoresNum()}\n      {this.renderFiltersOrder()}\n      <div>\n        <p>Filtros {this.showFilters(filters)}</p>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  console.log('filterByNumericValues', state);\n  return {\n    data: state.planetsReducer.data,\n    filters: state.filters.filterByNumericValues,\n    stateToPropsSort: state.filters.sort,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchSearch: (name) => dispatch(filtrarPlanetsName(name)),\n  dispatchFilterValues: (\n    column,\n    comparison,\n    value,\n  ) => dispatch(filterValues(column, comparison, value)),\n  dispatchRemoverFiltroDaTela: (column) => dispatch(removerFiltroDaTela(column)),\n  dispatchOrdenarColumns: (column, sort) => dispatch(ordenarColumns(column, sort)),\n});\n\nFiltrosDaPagina.propTypes = {\n  dispatchSearch: PropTypes.func.isRequired,\n  dispatchFilterValues: PropTypes.func.isRequired,\n  filters: PropTypes.func.isRequired,\n  dispatchRemoverFiltroDaTela: PropTypes.func.isRequired,\n  dispatchOrdenarColumns: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FiltrosDaPagina);\n"]},"metadata":{},"sourceType":"module"}